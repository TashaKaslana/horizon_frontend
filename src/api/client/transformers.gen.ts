// This file is auto-generated by @hey-api/openapi-ts

import type { RestoreUserResponse, DeleteRoleResponse, GetRoleByIdResponse, UpdateRoleResponse, DeletePermissionResponse, GetPermissionByIdResponse, UpdatePermissionResponse, UpdateUserImageResponse, UpdateCurrentUserInfoResponse, UpdateUserAccountResponse, GetUserLoginStatusResponse, UpdateUserLoginStatusResponse, GetLoginStatusResponse, UpdateLoginStatusResponse, GetMySettingResponse, UpdateMySettingResponse, UpdateReportStatusResponse, BulkUpdateReportsResponse, DeletePostResponse, GetPostByIdResponse, UpdatePostResponse, DeleteTagResponse, GetTagByIdResponse, UpdateTagResponse, RemoveAllTagsFromPostResponse, UpdatePostTagsResponse, BulkUpdatePostsResponse, DeleteCommentResponse, GetCommentByIdResponse, UpdateCommentResponse, BulkUpdateCommentsResponse, UpdateUserInfoResponse, UpdateUserAccount1Response, BulkUpdateUsersResponse, BulkDeletePostsResponse, BulkUpdatePosts1Response, BulkUpdateNotificationsResponse, UpdateNotificationByIdResponse, CreateUserResponse, GetAllRolesResponse, CreateRoleResponse, SyncPermissionsForRoleResponse, AssignPermissionsToRoleResponse, GetAllPermissionsResponse, CreatePermissionResponse, GenerateUploadSignatureResponse, CreateAssetResponse, SearchReportsResponse, CreateReportResponse, CreatePostResponse, RecordViewResponse, GetInteractionsByPostIdResponse, CreateInteractionResponse, DeleteBookmarkResponse, IsBookmarkedResponse, BookmarkPostResponse, GetAllTagsResponse, CreateTagResponse, AddTagsToPostResponse, GetPostCategoriesResponse, CreatePostCategoryResponse, CleanupOldSoftDeletedNotificationsResponse, UnfollowResponse, FollowResponse, CreateCommentResponse, GetInteractionsResponse, CreateInteraction1Response, EnableMaintenanceResponse, DisableMaintenanceResponse, GetAllNotificationsResponse, CreateNotificationResponse, CreateAdminNotificationsResponse, GetAllLogEntriesResponse, CreateLogEntryResponse, DeletePostCategoryResponse, UpdatePostCategoryResponse, UnmarkNotificationAsReadResponse, MarkNotificationAsReadResponse, UnmarkAllNotificationsAsReadResponse, MarkAllNotificationsAsReadResponse, UnpinCommentResponse, PinCommentResponse, MarkAsUnreadResponse, MarkAsReadResponse, IsUserExistsResponse, GetUserSummaryResponse, GetUserIntroductionResponse, GetRoleBySlugResponse, GetPermissionBySlugResponse, DeleteCurrentUserResponse, GetCurrentUserResponse, IsUserExistsByAuth0IdResponse, GetVideoThumbnailUrlResponse, GetVideoPlaybackUrlResponse, GetAssetByIdResponse, GetAssetByPublicIdResponse, DeleteReportResponse, GetReportByIdResponse, GetAllReportsResponse, GetTotalViewsResponse, HasMeInteractedResponse, GetTotalViewsByUserIdResponse, GetCountAllPostsByUserIdResponse, GetAllPublicPostsByUserIdResponse, GetTagsWithCountsResponse, GetTagWithCountByIdResponse, GetTagWithCountBySlugResponse, GetTagWithCountByNameResponse, GetTagNamesByPostIdResponse, GetTagsByPostIdResponse, GetAllTagsWithCountsResponse, GetAllPublicPostsResponse, GetMeAllPostsResponse, GetPostCategoryByNameResponse, GetCategoriesWithCountsResponse, GetCategoryWithCountByNameResponse, GetCategoryWithCountByIdResponse, GetPostCategoryByIdResponse, GetAllCategoriesWithCountsResponse, GetNotificationByIdResponse, GetNotificationStatisticsResponse, GetMyNotificationsResponse, GetHistoriesByUserIdResponse, GetHistoriesForMeResponse, GetOverviewResponse, GetFollowingByUserIdResponse, GetFollowersByUserIdResponse, GetMyFollowingResponse, GetMyFollowersResponse, IsFriendResponse, GetFeedResponse, GetFeedByUserIdResponse, GetFeed1Response, GetAllCommentsByPostIdResponse, GetModerationOverviewResponse, GetUserModerationOverviewResponse, GetPostModerationOverviewResponse, GetCommentModerationOverviewResponse, GetDailyPendingAndResolvedReportsResponse, GetLogOverviewResponse, GetDailyErrorLogsResponse, GetDailyLogsBySeverityResponse, GetNotificationTrendsResponse, GetAdminNotificationOverviewResponse, GetNotificationsByTypeResponse, GetNotificationsBySeverityResponse, GetAllUsersResponse, DeleteUserResponse, GetUserResponse, GetAllUserIntroductionsResponse, GetSystemStatusResponse, GetStatusMaintenanceResponse, GetDatabaseSchemaResponse, GetAllPostsForAdminResponse, DeletePost1Response, GetPostByIdForAdminResponse, GetAllPostWithDetailsForAdminResponse, DeleteNotificationResponse, GetNotificationById1Response, GetAllNotificationByRecipientIdResponse, GetLogEntryByIdResponse, GetAllCommentsResponse, GetAllCommentsWithPostDetailsResponse, GetUserAnalyticsOverviewResponse, GetDailyUserCountsResponse, GetTagAnalyticsOverviewResponse, GetTagDistributionResponse, GetDailyTagCountsResponse, GetPostAnalyticsResponse, GetDailyPostCountResponse, GetUsersPerDayResponse, GetPostsPerDayResponse, GetDashboardOverviewResponse, GetCommentsPerDayResponse, GetAllDashboardDataResponse, GetCommentAnalyticsOverviewResponse, GetDailyCommentCountsResponse, GetCategoryAnalyticsOverviewResponse, GetCategoryDistributionResponse, GetDailyCategoryCountsResponse, GetAllResponse, BulkDeleteRolesResponse, BulkDeletePermissionsResponse, DeleteAssetResponse, BulkDeleteReportsResponse, DeleteInteractionResponse, RemoveTagFromPostResponse, BulkDeleteTagsResponse, DeletePostCategoriesResponse, SoftDeleteNotificationByIdResponse, DismissAllNotificationsResponse, RemoveInteractionResponse, BulkDeleteUsersResponse, DeleteAllUsersResponse, DeleteAllPostsByUserResponse, BulkDeleteNotificationsResponse, ForceDeleteNotificationByIdResponse, BulkDeleteLogEntriesResponse, DeleteMultipleCommentsResponse, DeleteAllCommentsResponse } from './types.gen';

const apiErrorResponseSchemaResponseTransformer = (data: any) => {
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

const restApiResponseVoidSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const restoreUserResponseTransformer = async (data: any): Promise<RestoreUserResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteRoleResponseTransformer = async (data: any): Promise<DeleteRoleResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const permissionDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const roleDtoSchemaResponseTransformer = (data: any) => {
    if (data.permissions) {
        data.permissions = data.permissions.map((item: any) => {
            return permissionDtoSchemaResponseTransformer(item);
        });
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseRoleDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = roleDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getRoleByIdResponseTransformer = async (data: any): Promise<GetRoleByIdResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const updateRoleResponseTransformer = async (data: any): Promise<UpdateRoleResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const deletePermissionResponseTransformer = async (data: any): Promise<DeletePermissionResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const restApiResponsePermissionDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = permissionDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getPermissionByIdResponseTransformer = async (data: any): Promise<GetPermissionByIdResponse> => {
    data = restApiResponsePermissionDtoSchemaResponseTransformer(data);
    return data;
};

export const updatePermissionResponseTransformer = async (data: any): Promise<UpdatePermissionResponse> => {
    data = restApiResponsePermissionDtoSchemaResponseTransformer(data);
    return data;
};

const userRespondDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.dateOfBirth) {
        data.dateOfBirth = new Date(data.dateOfBirth);
    }
    if (data.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data.role) {
        data.role = roleDtoSchemaResponseTransformer(data.role);
    }
    if (data.lastLogin) {
        data.lastLogin = new Date(data.lastLogin);
    }
    return data;
};

const restApiResponseUserRespondDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = userRespondDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const updateUserImageResponseTransformer = async (data: any): Promise<UpdateUserImageResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const updateCurrentUserInfoResponseTransformer = async (data: any): Promise<UpdateCurrentUserInfoResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const updateUserAccountResponseTransformer = async (data: any): Promise<UpdateUserAccountResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

const userLoginStatusDtoSchemaResponseTransformer = (data: any) => {
    if (data.lastLogin) {
        data.lastLogin = new Date(data.lastLogin);
    }
    return data;
};

const restApiResponseUserLoginStatusDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = userLoginStatusDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getUserLoginStatusResponseTransformer = async (data: any): Promise<GetUserLoginStatusResponse> => {
    data = restApiResponseUserLoginStatusDtoSchemaResponseTransformer(data);
    return data;
};

export const updateUserLoginStatusResponseTransformer = async (data: any): Promise<UpdateUserLoginStatusResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const getLoginStatusResponseTransformer = async (data: any): Promise<GetLoginStatusResponse> => {
    data = restApiResponseUserLoginStatusDtoSchemaResponseTransformer(data);
    return data;
};

export const updateLoginStatusResponseTransformer = async (data: any): Promise<UpdateLoginStatusResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseUserSettingDtoSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getMySettingResponseTransformer = async (data: any): Promise<GetMySettingResponse> => {
    data = restApiResponseUserSettingDtoSchemaResponseTransformer(data);
    return data;
};

export const updateMySettingResponseTransformer = async (data: any): Promise<UpdateMySettingResponse> => {
    data = restApiResponseUserSettingDtoSchemaResponseTransformer(data);
    return data;
};

const commentDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const userSummaryRespondSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const reportDtoSchemaResponseTransformer = (data: any) => {
    if (data.comment) {
        data.comment = commentDtoSchemaResponseTransformer(data.comment);
    }
    if (data.reportedUser) {
        data.reportedUser = userSummaryRespondSchemaResponseTransformer(data.reportedUser);
    }
    if (data.reporter) {
        data.reporter = userSummaryRespondSchemaResponseTransformer(data.reporter);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.resolvedAt) {
        data.resolvedAt = new Date(data.resolvedAt);
    }
    return data;
};

const restApiResponseReportDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = reportDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const updateReportStatusResponseTransformer = async (data: any): Promise<UpdateReportStatusResponse> => {
    data = restApiResponseReportDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListReportDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return reportDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const bulkUpdateReportsResponseTransformer = async (data: any): Promise<BulkUpdateReportsResponse> => {
    data = restApiResponseListReportDtoSchemaResponseTransformer(data);
    return data;
};

export const deletePostResponseTransformer = async (data: any): Promise<DeletePostResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const assetRespondSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.bytes) {
        data.bytes = BigInt(data.bytes.toString());
    }
    return data;
};

const postResponseSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.videoAsset) {
        data.videoAsset = assetRespondSchemaResponseTransformer(data.videoAsset);
    }
    return data;
};

const restApiResponsePostResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postResponseSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getPostByIdResponseTransformer = async (data: any): Promise<GetPostByIdResponse> => {
    data = restApiResponsePostResponseSchemaResponseTransformer(data);
    return data;
};

export const updatePostResponseTransformer = async (data: any): Promise<UpdatePostResponse> => {
    data = restApiResponsePostResponseSchemaResponseTransformer(data);
    return data;
};

export const deleteTagResponseTransformer = async (data: any): Promise<DeleteTagResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const tagResponseSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const restApiResponseTagResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = tagResponseSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTagByIdResponseTransformer = async (data: any): Promise<GetTagByIdResponse> => {
    data = restApiResponseTagResponseSchemaResponseTransformer(data);
    return data;
};

export const updateTagResponseTransformer = async (data: any): Promise<UpdateTagResponse> => {
    data = restApiResponseTagResponseSchemaResponseTransformer(data);
    return data;
};

export const removeAllTagsFromPostResponseTransformer = async (data: any): Promise<RemoveAllTagsFromPostResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const updatePostTagsResponseTransformer = async (data: any): Promise<UpdatePostTagsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListPostResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return postResponseSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const bulkUpdatePostsResponseTransformer = async (data: any): Promise<BulkUpdatePostsResponse> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

export const deleteCommentResponseTransformer = async (data: any): Promise<DeleteCommentResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const commentRespondSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.interactionCount) {
        data.interactionCount = BigInt(data.interactionCount.toString());
    }
    return data;
};

const restApiResponseCommentRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = commentRespondSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getCommentByIdResponseTransformer = async (data: any): Promise<GetCommentByIdResponse> => {
    data = restApiResponseCommentRespondSchemaResponseTransformer(data);
    return data;
};

export const updateCommentResponseTransformer = async (data: any): Promise<UpdateCommentResponse> => {
    data = restApiResponseCommentRespondSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListCommentRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return commentRespondSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const bulkUpdateCommentsResponseTransformer = async (data: any): Promise<BulkUpdateCommentsResponse> => {
    data = restApiResponseListCommentRespondSchemaResponseTransformer(data);
    return data;
};

export const updateUserInfoResponseTransformer = async (data: any): Promise<UpdateUserInfoResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const updateUserAccount1ResponseTransformer = async (data: any): Promise<UpdateUserAccount1Response> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListUserRespondDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userRespondDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const bulkUpdateUsersResponseTransformer = async (data: any): Promise<BulkUpdateUsersResponse> => {
    data = restApiResponseListUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const bulkDeletePostsResponseTransformer = async (data: any): Promise<BulkDeletePostsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkUpdatePosts1ResponseTransformer = async (data: any): Promise<BulkUpdatePosts1Response> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

const adminNotificationDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListAdminNotificationDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return adminNotificationDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const bulkUpdateNotificationsResponseTransformer = async (data: any): Promise<BulkUpdateNotificationsResponse> => {
    data = restApiResponseListAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

export const updateNotificationByIdResponseTransformer = async (data: any): Promise<UpdateNotificationByIdResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const createUserResponseTransformer = async (data: any): Promise<CreateUserResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListRoleDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return roleDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllRolesResponseTransformer = async (data: any): Promise<GetAllRolesResponse> => {
    data = restApiResponseListRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const createRoleResponseTransformer = async (data: any): Promise<CreateRoleResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const syncPermissionsForRoleResponseTransformer = async (data: any): Promise<SyncPermissionsForRoleResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const assignPermissionsToRoleResponseTransformer = async (data: any): Promise<AssignPermissionsToRoleResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListPermissionDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return permissionDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllPermissionsResponseTransformer = async (data: any): Promise<GetAllPermissionsResponse> => {
    data = restApiResponseListPermissionDtoSchemaResponseTransformer(data);
    return data;
};

export const createPermissionResponseTransformer = async (data: any): Promise<CreatePermissionResponse> => {
    data = restApiResponsePermissionDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseMapStringObjectSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const generateUploadSignatureResponseTransformer = async (data: any): Promise<GenerateUploadSignatureResponse> => {
    data = restApiResponseMapStringObjectSchemaResponseTransformer(data);
    return data;
};

const restApiResponseAssetRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = assetRespondSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createAssetResponseTransformer = async (data: any): Promise<CreateAssetResponse> => {
    data = restApiResponseAssetRespondSchemaResponseTransformer(data);
    return data;
};

export const searchReportsResponseTransformer = async (data: any): Promise<SearchReportsResponse> => {
    data = restApiResponseListReportDtoSchemaResponseTransformer(data);
    return data;
};

export const createReportResponseTransformer = async (data: any): Promise<CreateReportResponse> => {
    data = restApiResponseReportDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponsePostCreatedDtoSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createPostResponseTransformer = async (data: any): Promise<CreatePostResponse> => {
    data = restApiResponsePostCreatedDtoSchemaResponseTransformer(data);
    return data;
};

export const recordViewResponseTransformer = async (data: any): Promise<RecordViewResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const postInteractionResponseSchemaResponseTransformer = (data: any) => {
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListPostInteractionResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return postInteractionResponseSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getInteractionsByPostIdResponseTransformer = async (data: any): Promise<GetInteractionsByPostIdResponse> => {
    data = restApiResponseListPostInteractionResponseSchemaResponseTransformer(data);
    return data;
};

export const createInteractionResponseTransformer = async (data: any): Promise<CreateInteractionResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteBookmarkResponseTransformer = async (data: any): Promise<DeleteBookmarkResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const restApiResponseBooleanSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const isBookmarkedResponseTransformer = async (data: any): Promise<IsBookmarkedResponse> => {
    data = restApiResponseBooleanSchemaResponseTransformer(data);
    return data;
};

export const bookmarkPostResponseTransformer = async (data: any): Promise<BookmarkPostResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListTagResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return tagResponseSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllTagsResponseTransformer = async (data: any): Promise<GetAllTagsResponse> => {
    data = restApiResponseListTagResponseSchemaResponseTransformer(data);
    return data;
};

export const createTagResponseTransformer = async (data: any): Promise<CreateTagResponse> => {
    data = restApiResponseTagResponseSchemaResponseTransformer(data);
    return data;
};

export const addTagsToPostResponseTransformer = async (data: any): Promise<AddTagsToPostResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const postCategorySchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

const restApiResponseListPostCategorySchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return postCategorySchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getPostCategoriesResponseTransformer = async (data: any): Promise<GetPostCategoriesResponse> => {
    data = restApiResponseListPostCategorySchemaResponseTransformer(data);
    return data;
};

const restApiResponsePostCategorySchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postCategorySchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createPostCategoryResponseTransformer = async (data: any): Promise<CreatePostCategoryResponse> => {
    data = restApiResponsePostCategorySchemaResponseTransformer(data);
    return data;
};

export const cleanupOldSoftDeletedNotificationsResponseTransformer = async (data: any): Promise<CleanupOldSoftDeletedNotificationsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const unfollowResponseTransformer = async (data: any): Promise<UnfollowResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const followResponseTransformer = async (data: any): Promise<FollowResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const createCommentResponseTransformer = async (data: any): Promise<CreateCommentResponse> => {
    data = restApiResponseCommentRespondSchemaResponseTransformer(data);
    return data;
};

const commentInteractionRespondSchemaResponseTransformer = (data: any) => {
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListCommentInteractionRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return commentInteractionRespondSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getInteractionsResponseTransformer = async (data: any): Promise<GetInteractionsResponse> => {
    data = restApiResponseListCommentInteractionRespondSchemaResponseTransformer(data);
    return data;
};

const restApiResponseCommentInteractionRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = commentInteractionRespondSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createInteraction1ResponseTransformer = async (data: any): Promise<CreateInteraction1Response> => {
    data = restApiResponseCommentInteractionRespondSchemaResponseTransformer(data);
    return data;
};

const restApiResponseMaintenanceInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const enableMaintenanceResponseTransformer = async (data: any): Promise<EnableMaintenanceResponse> => {
    data = restApiResponseMaintenanceInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const disableMaintenanceResponseTransformer = async (data: any): Promise<DisableMaintenanceResponse> => {
    data = restApiResponseMaintenanceInfoDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllNotificationsResponseTransformer = async (data: any): Promise<GetAllNotificationsResponse> => {
    data = restApiResponseListAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseAdminNotificationDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = adminNotificationDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createNotificationResponseTransformer = async (data: any): Promise<CreateNotificationResponse> => {
    data = restApiResponseAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

export const createAdminNotificationsResponseTransformer = async (data: any): Promise<CreateAdminNotificationsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const logEntryDtoSchemaResponseTransformer = (data: any) => {
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListLogEntryDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return logEntryDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllLogEntriesResponseTransformer = async (data: any): Promise<GetAllLogEntriesResponse> => {
    data = restApiResponseListLogEntryDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseLogEntryDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = logEntryDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const createLogEntryResponseTransformer = async (data: any): Promise<CreateLogEntryResponse> => {
    data = restApiResponseLogEntryDtoSchemaResponseTransformer(data);
    return data;
};

export const deletePostCategoryResponseTransformer = async (data: any): Promise<DeletePostCategoryResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const postCategorySummarySchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponsePostCategorySummarySchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postCategorySummarySchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const updatePostCategoryResponseTransformer = async (data: any): Promise<UpdatePostCategoryResponse> => {
    data = restApiResponsePostCategorySummarySchemaResponseTransformer(data);
    return data;
};

export const unmarkNotificationAsReadResponseTransformer = async (data: any): Promise<UnmarkNotificationAsReadResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const markNotificationAsReadResponseTransformer = async (data: any): Promise<MarkNotificationAsReadResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const unmarkAllNotificationsAsReadResponseTransformer = async (data: any): Promise<UnmarkAllNotificationsAsReadResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const markAllNotificationsAsReadResponseTransformer = async (data: any): Promise<MarkAllNotificationsAsReadResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const unpinCommentResponseTransformer = async (data: any): Promise<UnpinCommentResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const pinCommentResponseTransformer = async (data: any): Promise<PinCommentResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const markAsUnreadResponseTransformer = async (data: any): Promise<MarkAsUnreadResponse> => {
    data = restApiResponseAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

export const markAsReadResponseTransformer = async (data: any): Promise<MarkAsReadResponse> => {
    data = restApiResponseAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

export const isUserExistsResponseTransformer = async (data: any): Promise<IsUserExistsResponse> => {
    data = restApiResponseBooleanSchemaResponseTransformer(data);
    return data;
};

const restApiResponseUserSummaryRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = userSummaryRespondSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getUserSummaryResponseTransformer = async (data: any): Promise<GetUserSummaryResponse> => {
    data = restApiResponseUserSummaryRespondSchemaResponseTransformer(data);
    return data;
};

const userIntroductionSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.role) {
        data.role = roleDtoSchemaResponseTransformer(data.role);
    }
    if (data.lastLogin) {
        data.lastLogin = new Date(data.lastLogin);
    }
    return data;
};

const restApiResponseUserIntroductionSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = userIntroductionSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getUserIntroductionResponseTransformer = async (data: any): Promise<GetUserIntroductionResponse> => {
    data = restApiResponseUserIntroductionSchemaResponseTransformer(data);
    return data;
};

export const getRoleBySlugResponseTransformer = async (data: any): Promise<GetRoleBySlugResponse> => {
    data = restApiResponseRoleDtoSchemaResponseTransformer(data);
    return data;
};

export const getPermissionBySlugResponseTransformer = async (data: any): Promise<GetPermissionBySlugResponse> => {
    data = restApiResponsePermissionDtoSchemaResponseTransformer(data);
    return data;
};

export const deleteCurrentUserResponseTransformer = async (data: any): Promise<DeleteCurrentUserResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const getCurrentUserResponseTransformer = async (data: any): Promise<GetCurrentUserResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

export const isUserExistsByAuth0IdResponseTransformer = async (data: any): Promise<IsUserExistsByAuth0IdResponse> => {
    data = restApiResponseBooleanSchemaResponseTransformer(data);
    return data;
};

const restApiResponseStringSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getVideoThumbnailUrlResponseTransformer = async (data: any): Promise<GetVideoThumbnailUrlResponse> => {
    data = restApiResponseStringSchemaResponseTransformer(data);
    return data;
};

export const getVideoPlaybackUrlResponseTransformer = async (data: any): Promise<GetVideoPlaybackUrlResponse> => {
    data = restApiResponseStringSchemaResponseTransformer(data);
    return data;
};

export const getAssetByIdResponseTransformer = async (data: any): Promise<GetAssetByIdResponse> => {
    data = restApiResponseAssetRespondSchemaResponseTransformer(data);
    return data;
};

export const getAssetByPublicIdResponseTransformer = async (data: any): Promise<GetAssetByPublicIdResponse> => {
    data = restApiResponseAssetRespondSchemaResponseTransformer(data);
    return data;
};

export const deleteReportResponseTransformer = async (data: any): Promise<DeleteReportResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const getReportByIdResponseTransformer = async (data: any): Promise<GetReportByIdResponse> => {
    data = restApiResponseReportDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllReportsResponseTransformer = async (data: any): Promise<GetAllReportsResponse> => {
    data = restApiResponseListReportDtoSchemaResponseTransformer(data);
    return data;
};

const postViewRespondSchemaResponseTransformer = (data: any) => {
    if (data.totalView) {
        data.totalView = BigInt(data.totalView.toString());
    }
    return data;
};

const restApiResponsePostViewRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postViewRespondSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTotalViewsResponseTransformer = async (data: any): Promise<GetTotalViewsResponse> => {
    data = restApiResponsePostViewRespondSchemaResponseTransformer(data);
    return data;
};

export const hasMeInteractedResponseTransformer = async (data: any): Promise<HasMeInteractedResponse> => {
    data = restApiResponseBooleanSchemaResponseTransformer(data);
    return data;
};

export const getTotalViewsByUserIdResponseTransformer = async (data: any): Promise<GetTotalViewsByUserIdResponse> => {
    data = restApiResponsePostViewRespondSchemaResponseTransformer(data);
    return data;
};

const totalPostResponseSchemaResponseTransformer = (data: any) => {
    if (data.totalPosts) {
        data.totalPosts = BigInt(data.totalPosts.toString());
    }
    return data;
};

const restApiResponseTotalPostResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = totalPostResponseSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getCountAllPostsByUserIdResponseTransformer = async (data: any): Promise<GetCountAllPostsByUserIdResponse> => {
    data = restApiResponseTotalPostResponseSchemaResponseTransformer(data);
    return data;
};

export const getAllPublicPostsByUserIdResponseTransformer = async (data: any): Promise<GetAllPublicPostsByUserIdResponse> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

const tagWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.postCount) {
        data.postCount = BigInt(data.postCount.toString());
    }
    return data;
};

const restApiResponseListTagWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return tagWithCountDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTagsWithCountsResponseTransformer = async (data: any): Promise<GetTagsWithCountsResponse> => {
    data = restApiResponseListTagWithCountDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseTagWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = tagWithCountDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTagWithCountByIdResponseTransformer = async (data: any): Promise<GetTagWithCountByIdResponse> => {
    data = restApiResponseTagWithCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getTagWithCountBySlugResponseTransformer = async (data: any): Promise<GetTagWithCountBySlugResponse> => {
    data = restApiResponseTagWithCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getTagWithCountByNameResponseTransformer = async (data: any): Promise<GetTagWithCountByNameResponse> => {
    data = restApiResponseTagWithCountDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListStringSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTagNamesByPostIdResponseTransformer = async (data: any): Promise<GetTagNamesByPostIdResponse> => {
    data = restApiResponseListStringSchemaResponseTransformer(data);
    return data;
};

export const getTagsByPostIdResponseTransformer = async (data: any): Promise<GetTagsByPostIdResponse> => {
    data = restApiResponseListTagResponseSchemaResponseTransformer(data);
    return data;
};

export const getAllTagsWithCountsResponseTransformer = async (data: any): Promise<GetAllTagsWithCountsResponse> => {
    data = restApiResponseListTagWithCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllPublicPostsResponseTransformer = async (data: any): Promise<GetAllPublicPostsResponse> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

export const getMeAllPostsResponseTransformer = async (data: any): Promise<GetMeAllPostsResponse> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

export const getPostCategoryByNameResponseTransformer = async (data: any): Promise<GetPostCategoryByNameResponse> => {
    data = restApiResponsePostCategorySummarySchemaResponseTransformer(data);
    return data;
};

const postCategoryWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.postCount) {
        data.postCount = BigInt(data.postCount.toString());
    }
    return data;
};

const restApiResponseListPostCategoryWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return postCategoryWithCountDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getCategoriesWithCountsResponseTransformer = async (data: any): Promise<GetCategoriesWithCountsResponse> => {
    data = restApiResponseListPostCategoryWithCountDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponsePostCategoryWithCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postCategoryWithCountDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getCategoryWithCountByNameResponseTransformer = async (data: any): Promise<GetCategoryWithCountByNameResponse> => {
    data = restApiResponsePostCategoryWithCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getCategoryWithCountByIdResponseTransformer = async (data: any): Promise<GetCategoryWithCountByIdResponse> => {
    data = restApiResponsePostCategoryWithCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getPostCategoryByIdResponseTransformer = async (data: any): Promise<GetPostCategoryByIdResponse> => {
    data = restApiResponsePostCategorySummarySchemaResponseTransformer(data);
    return data;
};

export const getAllCategoriesWithCountsResponseTransformer = async (data: any): Promise<GetAllCategoriesWithCountsResponse> => {
    data = restApiResponseListPostCategoryWithCountDtoSchemaResponseTransformer(data);
    return data;
};

const notificationResponseSchemaResponseTransformer = (data: any) => {
    if (data.recipientUser) {
        data.recipientUser = userSummaryRespondSchemaResponseTransformer(data.recipientUser);
    }
    if (data.senderUser) {
        data.senderUser = userSummaryRespondSchemaResponseTransformer(data.senderUser);
    }
    if (data.comment) {
        data.comment = commentDtoSchemaResponseTransformer(data.comment);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    return data;
};

const restApiResponseNotificationResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = notificationResponseSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getNotificationByIdResponseTransformer = async (data: any): Promise<GetNotificationByIdResponse> => {
    data = restApiResponseNotificationResponseSchemaResponseTransformer(data);
    return data;
};

const restApiResponseNotificationStatisticSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getNotificationStatisticsResponseTransformer = async (data: any): Promise<GetNotificationStatisticsResponse> => {
    data = restApiResponseNotificationStatisticSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListNotificationResponseSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return notificationResponseSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getMyNotificationsResponseTransformer = async (data: any): Promise<GetMyNotificationsResponse> => {
    data = restApiResponseListNotificationResponseSchemaResponseTransformer(data);
    return data;
};

const historyActivityDtoSchemaResponseTransformer = (data: any) => {
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListHistoryActivityDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return historyActivityDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getHistoriesByUserIdResponseTransformer = async (data: any): Promise<GetHistoriesByUserIdResponse> => {
    data = restApiResponseListHistoryActivityDtoSchemaResponseTransformer(data);
    return data;
};

const activityDisplayDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListActivityDisplayDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return activityDisplayDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getHistoriesForMeResponseTransformer = async (data: any): Promise<GetHistoriesForMeResponse> => {
    data = restApiResponseListActivityDisplayDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseFollowOverviewSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getOverviewResponseTransformer = async (data: any): Promise<GetOverviewResponse> => {
    data = restApiResponseFollowOverviewSchemaResponseTransformer(data);
    return data;
};

const followOneSideRespondSchemaResponseTransformer = (data: any) => {
    if (data.user) {
        data.user = userIntroductionSchemaResponseTransformer(data.user);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListFollowOneSideRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return followOneSideRespondSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getFollowingByUserIdResponseTransformer = async (data: any): Promise<GetFollowingByUserIdResponse> => {
    data = restApiResponseListFollowOneSideRespondSchemaResponseTransformer(data);
    return data;
};

export const getFollowersByUserIdResponseTransformer = async (data: any): Promise<GetFollowersByUserIdResponse> => {
    data = restApiResponseListFollowOneSideRespondSchemaResponseTransformer(data);
    return data;
};

export const getMyFollowingResponseTransformer = async (data: any): Promise<GetMyFollowingResponse> => {
    data = restApiResponseListFollowOneSideRespondSchemaResponseTransformer(data);
    return data;
};

export const getMyFollowersResponseTransformer = async (data: any): Promise<GetMyFollowersResponse> => {
    data = restApiResponseListFollowOneSideRespondSchemaResponseTransformer(data);
    return data;
};

export const isFriendResponseTransformer = async (data: any): Promise<IsFriendResponse> => {
    data = restApiResponseBooleanSchemaResponseTransformer(data);
    return data;
};

const postStatisticSchemaResponseTransformer = (data: any) => {
    if (data.totalLikes) {
        data.totalLikes = BigInt(data.totalLikes.toString());
    }
    if (data.totalComments) {
        data.totalComments = BigInt(data.totalComments.toString());
    }
    if (data.totalBookmarks) {
        data.totalBookmarks = BigInt(data.totalBookmarks.toString());
    }
    if (data.totalViews) {
        data.totalViews = BigInt(data.totalViews.toString());
    }
    return data;
};

const feedPageSchemaResponseTransformer = (data: any) => {
    if (data.post) {
        data.post = postResponseSchemaResponseTransformer(data.post);
    }
    if (data.statistic) {
        data.statistic = postStatisticSchemaResponseTransformer(data.statistic);
    }
    return data;
};

const restApiResponseListFeedPageSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return feedPageSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getFeedResponseTransformer = async (data: any): Promise<GetFeedResponse> => {
    data = restApiResponseListFeedPageSchemaResponseTransformer(data);
    return data;
};

export const getFeedByUserIdResponseTransformer = async (data: any): Promise<GetFeedByUserIdResponse> => {
    data = restApiResponseListFeedPageSchemaResponseTransformer(data);
    return data;
};

const restApiResponseFeedPageSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = feedPageSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getFeed1ResponseTransformer = async (data: any): Promise<GetFeed1Response> => {
    data = restApiResponseFeedPageSchemaResponseTransformer(data);
    return data;
};

export const getAllCommentsByPostIdResponseTransformer = async (data: any): Promise<GetAllCommentsByPostIdResponse> => {
    data = restApiResponseListCommentRespondSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListOverviewStatisticSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getModerationOverviewResponseTransformer = async (data: any): Promise<GetModerationOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getUserModerationOverviewResponseTransformer = async (data: any): Promise<GetUserModerationOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getPostModerationOverviewResponseTransformer = async (data: any): Promise<GetPostModerationOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getCommentModerationOverviewResponseTransformer = async (data: any): Promise<GetCommentModerationOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

const dailyPendingAndResolvedDtoSchemaResponseTransformer = (data: any) => {
    if (data.date) {
        data.date = new Date(data.date);
    }
    if (data.pendingCount) {
        data.pendingCount = BigInt(data.pendingCount.toString());
    }
    if (data.resolvedCount) {
        data.resolvedCount = BigInt(data.resolvedCount.toString());
    }
    return data;
};

const restApiResponseListDailyPendingAndResolvedDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return dailyPendingAndResolvedDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getDailyPendingAndResolvedReportsResponseTransformer = async (data: any): Promise<GetDailyPendingAndResolvedReportsResponse> => {
    data = restApiResponseListDailyPendingAndResolvedDtoSchemaResponseTransformer(data);
    return data;
};

export const getLogOverviewResponseTransformer = async (data: any): Promise<GetLogOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

const dailyCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.date) {
        data.date = new Date(data.date);
    }
    if (data.count) {
        data.count = BigInt(data.count.toString());
    }
    return data;
};

const restApiResponseListDailyCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return dailyCountDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getDailyErrorLogsResponseTransformer = async (data: any): Promise<GetDailyErrorLogsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseMapStringListDailyCountDtoSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getDailyLogsBySeverityResponseTransformer = async (data: any): Promise<GetDailyLogsBySeverityResponse> => {
    data = restApiResponseMapStringListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getNotificationTrendsResponseTransformer = async (data: any): Promise<GetNotificationTrendsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getAdminNotificationOverviewResponseTransformer = async (data: any): Promise<GetAdminNotificationOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

const restApiResponseMapStringLongSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getNotificationsByTypeResponseTransformer = async (data: any): Promise<GetNotificationsByTypeResponse> => {
    data = restApiResponseMapStringLongSchemaResponseTransformer(data);
    return data;
};

export const getNotificationsBySeverityResponseTransformer = async (data: any): Promise<GetNotificationsBySeverityResponse> => {
    data = restApiResponseMapStringLongSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListUserSummaryRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userSummaryRespondSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllUsersResponseTransformer = async (data: any): Promise<GetAllUsersResponse> => {
    data = restApiResponseListUserSummaryRespondSchemaResponseTransformer(data);
    return data;
};

export const deleteUserResponseTransformer = async (data: any): Promise<DeleteUserResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const getUserResponseTransformer = async (data: any): Promise<GetUserResponse> => {
    data = restApiResponseUserRespondDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListUserIntroductionSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userIntroductionSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllUserIntroductionsResponseTransformer = async (data: any): Promise<GetAllUserIntroductionsResponse> => {
    data = restApiResponseListUserIntroductionSchemaResponseTransformer(data);
    return data;
};

export const getSystemStatusResponseTransformer = async (data: any): Promise<GetSystemStatusResponse> => {
    data = restApiResponseMapStringObjectSchemaResponseTransformer(data);
    return data;
};

export const getStatusMaintenanceResponseTransformer = async (data: any): Promise<GetStatusMaintenanceResponse> => {
    data = restApiResponseMaintenanceInfoDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseDatabaseSchemaDtoSchemaResponseTransformer = (data: any) => {
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getDatabaseSchemaResponseTransformer = async (data: any): Promise<GetDatabaseSchemaResponse> => {
    data = restApiResponseDatabaseSchemaDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllPostsForAdminResponseTransformer = async (data: any): Promise<GetAllPostsForAdminResponse> => {
    data = restApiResponseListPostResponseSchemaResponseTransformer(data);
    return data;
};

export const deletePost1ResponseTransformer = async (data: any): Promise<DeletePost1Response> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

const postAdminViewDtoSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.videoAsset) {
        data.videoAsset = assetRespondSchemaResponseTransformer(data.videoAsset);
    }
    if (data.totalViews) {
        data.totalViews = BigInt(data.totalViews.toString());
    }
    if (data.totalInteractions) {
        data.totalInteractions = BigInt(data.totalInteractions.toString());
    }
    if (data.category) {
        data.category = postCategorySummarySchemaResponseTransformer(data.category);
    }
    return data;
};

const restApiResponsePostAdminViewDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = postAdminViewDtoSchemaResponseTransformer(data.data);
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getPostByIdForAdminResponseTransformer = async (data: any): Promise<GetPostByIdForAdminResponse> => {
    data = restApiResponsePostAdminViewDtoSchemaResponseTransformer(data);
    return data;
};

const restApiResponseListPostAdminViewDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return postAdminViewDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllPostWithDetailsForAdminResponseTransformer = async (data: any): Promise<GetAllPostWithDetailsForAdminResponse> => {
    data = restApiResponseListPostAdminViewDtoSchemaResponseTransformer(data);
    return data;
};

export const deleteNotificationResponseTransformer = async (data: any): Promise<DeleteNotificationResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const getNotificationById1ResponseTransformer = async (data: any): Promise<GetNotificationById1Response> => {
    data = restApiResponseAdminNotificationDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllNotificationByRecipientIdResponseTransformer = async (data: any): Promise<GetAllNotificationByRecipientIdResponse> => {
    data = restApiResponseListNotificationResponseSchemaResponseTransformer(data);
    return data;
};

export const getLogEntryByIdResponseTransformer = async (data: any): Promise<GetLogEntryByIdResponse> => {
    data = restApiResponseLogEntryDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllCommentsResponseTransformer = async (data: any): Promise<GetAllCommentsResponse> => {
    data = restApiResponseListCommentRespondSchemaResponseTransformer(data);
    return data;
};

const commentResponseWithPostDetailsSchemaResponseTransformer = (data: any) => {
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data.user) {
        data.user = userSummaryRespondSchemaResponseTransformer(data.user);
    }
    if (data.parentCommentUser) {
        data.parentCommentUser = userSummaryRespondSchemaResponseTransformer(data.parentCommentUser);
    }
    if (data.interactionCount) {
        data.interactionCount = BigInt(data.interactionCount.toString());
    }
    return data;
};

const restApiResponseListCommentResponseWithPostDetailsSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return commentResponseWithPostDetailsSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllCommentsWithPostDetailsResponseTransformer = async (data: any): Promise<GetAllCommentsWithPostDetailsResponse> => {
    data = restApiResponseListCommentResponseWithPostDetailsSchemaResponseTransformer(data);
    return data;
};

export const getUserAnalyticsOverviewResponseTransformer = async (data: any): Promise<GetUserAnalyticsOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getDailyUserCountsResponseTransformer = async (data: any): Promise<GetDailyUserCountsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getTagAnalyticsOverviewResponseTransformer = async (data: any): Promise<GetTagAnalyticsOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

const topTagUsageDtoSchemaResponseTransformer = (data: any) => {
    if (data.postDate) {
        data.postDate = new Date(data.postDate);
    }
    if (data.postCount) {
        data.postCount = BigInt(data.postCount.toString());
    }
    return data;
};

const restApiResponseListTopTagUsageDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return topTagUsageDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getTagDistributionResponseTransformer = async (data: any): Promise<GetTagDistributionResponse> => {
    data = restApiResponseListTopTagUsageDtoSchemaResponseTransformer(data);
    return data;
};

export const getDailyTagCountsResponseTransformer = async (data: any): Promise<GetDailyTagCountsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getPostAnalyticsResponseTransformer = async (data: any): Promise<GetPostAnalyticsResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getDailyPostCountResponseTransformer = async (data: any): Promise<GetDailyPostCountResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getUsersPerDayResponseTransformer = async (data: any): Promise<GetUsersPerDayResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getPostsPerDayResponseTransformer = async (data: any): Promise<GetPostsPerDayResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getDashboardOverviewResponseTransformer = async (data: any): Promise<GetDashboardOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getCommentsPerDayResponseTransformer = async (data: any): Promise<GetCommentsPerDayResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getAllDashboardDataResponseTransformer = async (data: any): Promise<GetAllDashboardDataResponse> => {
    data = restApiResponseMapStringObjectSchemaResponseTransformer(data);
    return data;
};

export const getCommentAnalyticsOverviewResponseTransformer = async (data: any): Promise<GetCommentAnalyticsOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

export const getDailyCommentCountsResponseTransformer = async (data: any): Promise<GetDailyCommentCountsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

export const getCategoryAnalyticsOverviewResponseTransformer = async (data: any): Promise<GetCategoryAnalyticsOverviewResponse> => {
    data = restApiResponseListOverviewStatisticSchemaResponseTransformer(data);
    return data;
};

const topCategoryUsageDtoSchemaResponseTransformer = (data: any) => {
    if (data.postDate) {
        data.postDate = new Date(data.postDate);
    }
    if (data.postCount) {
        data.postCount = BigInt(data.postCount.toString());
    }
    return data;
};

const restApiResponseListTopCategoryUsageDtoSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return topCategoryUsageDtoSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getCategoryDistributionResponseTransformer = async (data: any): Promise<GetCategoryDistributionResponse> => {
    data = restApiResponseListTopCategoryUsageDtoSchemaResponseTransformer(data);
    return data;
};

export const getDailyCategoryCountsResponseTransformer = async (data: any): Promise<GetDailyCategoryCountsResponse> => {
    data = restApiResponseListDailyCountDtoSchemaResponseTransformer(data);
    return data;
};

const followRespondSchemaResponseTransformer = (data: any) => {
    if (data.follower) {
        data.follower = userSummaryRespondSchemaResponseTransformer(data.follower);
    }
    if (data.following) {
        data.following = userSummaryRespondSchemaResponseTransformer(data.following);
    }
    if (data.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    return data;
};

const restApiResponseListFollowRespondSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return followRespondSchemaResponseTransformer(item);
        });
    }
    if (data.error) {
        data.error = apiErrorResponseSchemaResponseTransformer(data.error);
    }
    if (data.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const getAllResponseTransformer = async (data: any): Promise<GetAllResponse> => {
    data = restApiResponseListFollowRespondSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteRolesResponseTransformer = async (data: any): Promise<BulkDeleteRolesResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeletePermissionsResponseTransformer = async (data: any): Promise<BulkDeletePermissionsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteAssetResponseTransformer = async (data: any): Promise<DeleteAssetResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteReportsResponseTransformer = async (data: any): Promise<BulkDeleteReportsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteInteractionResponseTransformer = async (data: any): Promise<DeleteInteractionResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const removeTagFromPostResponseTransformer = async (data: any): Promise<RemoveTagFromPostResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteTagsResponseTransformer = async (data: any): Promise<BulkDeleteTagsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deletePostCategoriesResponseTransformer = async (data: any): Promise<DeletePostCategoriesResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const softDeleteNotificationByIdResponseTransformer = async (data: any): Promise<SoftDeleteNotificationByIdResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const dismissAllNotificationsResponseTransformer = async (data: any): Promise<DismissAllNotificationsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const removeInteractionResponseTransformer = async (data: any): Promise<RemoveInteractionResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteUsersResponseTransformer = async (data: any): Promise<BulkDeleteUsersResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteAllUsersResponseTransformer = async (data: any): Promise<DeleteAllUsersResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteAllPostsByUserResponseTransformer = async (data: any): Promise<DeleteAllPostsByUserResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteNotificationsResponseTransformer = async (data: any): Promise<BulkDeleteNotificationsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const forceDeleteNotificationByIdResponseTransformer = async (data: any): Promise<ForceDeleteNotificationByIdResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const bulkDeleteLogEntriesResponseTransformer = async (data: any): Promise<BulkDeleteLogEntriesResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteMultipleCommentsResponseTransformer = async (data: any): Promise<DeleteMultipleCommentsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};

export const deleteAllCommentsResponseTransformer = async (data: any): Promise<DeleteAllCommentsResponse> => {
    data = restApiResponseVoidSchemaResponseTransformer(data);
    return data;
};