// This file is auto-generated by @hey-api/openapi-ts

export type ApiErrorResponse = {
    status?: number;
    message?: string;
    path?: string;
    timestamp?: Date;
    error?: string;
    fieldErrors?: {
        [key: string]: string;
    };
    globalErrors?: Array<string>;
};

export type PaginationInfo = {
    currentPage?: number;
    pageSize?: number;
    totalItems?: number;
    totalPages?: number;
    hasNext?: boolean;
    hasPrevious?: boolean;
};

export type ResponseMetadata = {
    pagination?: PaginationInfo;
    links?: {
        [key: string]: string;
    };
};

export type RestApiResponseVoid = {
    success?: boolean;
    message?: string;
    data?: unknown;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdateRoleRequest = {
    name?: string;
    description?: string;
};

export type PermissionDto = {
    createdAt?: Date;
    id?: string;
    name?: string;
    slug?: string;
    description?: string;
    module?: string;
};

export type RestApiResponseRoleDto = {
    success?: boolean;
    message?: string;
    data?: RoleDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RoleDto = {
    id?: string;
    name?: string;
    slug?: string;
    description?: string;
    permissions?: Array<PermissionDto>;
    createdAt?: Date;
};

export type UpdatePermissionRequest = {
    name?: string;
    description?: string;
    module?: string;
};

export type RestApiResponsePermissionDto = {
    success?: boolean;
    message?: string;
    data?: PermissionDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UserImageUpdate = {
    profileImage?: string;
    coverImage?: string;
};

export type RestApiResponseUserRespondDto = {
    success?: boolean;
    message?: string;
    data?: UserRespondDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UserRespondDto = {
    createdAt?: Date;
    updatedAt?: Date;
    id?: string;
    auth0Id?: string;
    firstName?: string;
    lastName?: string;
    username?: string;
    email?: string;
    phoneNumber?: string;
    dateOfBirth?: Date;
    gender?: string;
    bio?: string;
    profileImage?: string;
    coverImage?: string;
    country?: string;
    city?: string;
    deletedAt?: Date;
    displayName?: string;
    status?: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'DEACTIVATED';
    role?: RoleDto;
    lastLogin?: Date;
    isLogin?: boolean;
};

export type UserUpdateInfoDto = {
    firstName: string;
    lastName: string;
    displayName: string;
    phoneNumber?: string;
    dateOfBirth?: Date;
    gender?: string;
    country?: string;
    city?: string;
    bio?: string;
    status?: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'DEACTIVATED';
};

export type UserAccountUpdate = {
    email: string;
    username: string;
    profileImage?: string;
    coverImage?: string;
};

export type UserLoginStatusDto = {
    isLogin?: boolean;
    lastLogin?: Date;
};

export type UserSettingDto = {
    preferences?: {
        [key: string]: unknown;
    };
};

export type RestApiResponseUserSettingDto = {
    success?: boolean;
    message?: string;
    data?: UserSettingDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CommentDto = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    content?: string;
};

export type PostSummaryResponse = {
    id?: string;
    createdBy?: string;
    userId?: string;
    caption?: string;
    description?: string;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
    videoThumbnailUrl?: string;
};

export type ReportDto = {
    id?: string;
    reason?: string;
    moderatorNotes?: string;
    status?: 'PENDING' | 'REVIEWED_APPROVED' | 'REVIEWED_REJECTED' | 'ACTIONTAKEN_CONTENTREMOVED' | 'ACTIONTAKEN_USERWARNED' | 'ACTIONTAKEN_USERBANNED' | 'RESOLVED';
    itemType?: 'POST' | 'COMMENT' | 'USER';
    post?: PostSummaryResponse;
    comment?: CommentDto;
    reportedUser?: UserSummaryRespond;
    reporter?: UserSummaryRespond;
    createdAt?: Date;
    updatedAt?: Date;
    resolvedAt?: Date;
};

export type RestApiResponseReportDto = {
    success?: boolean;
    message?: string;
    data?: ReportDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UserSummaryRespond = {
    id?: string;
    displayName?: string;
    username?: string;
    profileImage?: string;
    coverImage?: string;
    createdAt?: Date;
};

export type BulkReportUpdateRequest = {
    reportIds?: Array<string>;
    status?: 'PENDING' | 'REVIEWED_APPROVED' | 'REVIEWED_REJECTED' | 'ACTIONTAKEN_CONTENTREMOVED' | 'ACTIONTAKEN_USERWARNED' | 'ACTIONTAKEN_USERBANNED' | 'RESOLVED';
    moderatorNotes?: string;
};

export type RestApiResponseListReportDto = {
    success?: boolean;
    message?: string;
    data?: Array<ReportDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdatePostRequest = {
    caption: string;
    description: string;
    visibility: string;
    tags?: Array<string>;
    categoryName: string;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
};

export type AssetRespond = {
    createdAt?: Date;
    createdBy?: string;
    id?: string;
    publicId?: string;
    resourceType?: string;
    format?: string;
    bytes?: bigint;
    width?: number;
    height?: number;
    originalFilename?: string;
};

export type PostResponse = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    user?: UserSummaryRespond;
    caption?: string;
    description?: string;
    duration?: number;
    visibility?: string;
    tags?: Array<string>;
    videoPlaybackUrl?: string;
    videoThumbnailUrl?: string;
    videoAsset?: AssetRespond;
    isAuthorDeleted?: boolean;
    categoryName?: string;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
};

export type RestApiResponsePostResponse = {
    success?: boolean;
    message?: string;
    data?: PostResponse;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdateTagRequest = {
    name: string;
    description?: string;
};

export type RestApiResponseTagResponse = {
    success?: boolean;
    message?: string;
    data?: TagResponse;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type TagResponse = {
    id?: string;
    name?: string;
    slug?: string;
    description?: string;
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
};

export type BulkPostUpdateRequest = {
    ids: Array<string>;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
    visibility?: 'PUBLIC' | 'FRIENDS' | 'PRIVATE';
    categoryId?: string;
};

export type RestApiResponseListPostResponse = {
    success?: boolean;
    message?: string;
    data?: Array<PostResponse>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdateCommentContentDto = {
    content: string;
    status?: 'APPROVED' | 'PENDING' | 'SPAM' | 'REJECTED';
};

export type CommentRespond = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    content?: string;
    parentCommentId?: string;
    isAuthorDeleted?: boolean;
    user?: UserSummaryRespond;
    postId?: string;
    isPinned?: boolean;
    status?: 'APPROVED' | 'PENDING' | 'SPAM' | 'REJECTED';
    interactionCount?: bigint;
};

export type RestApiResponseCommentRespond = {
    success?: boolean;
    message?: string;
    data?: CommentRespond;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type BulkCommentUpdateRequest = {
    ids?: Array<string>;
    status?: 'APPROVED' | 'PENDING' | 'SPAM' | 'REJECTED';
};

export type RestApiResponseListCommentRespond = {
    success?: boolean;
    message?: string;
    data?: Array<CommentRespond>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type BulkUserUpdateRequest = {
    ids?: Array<string>;
    status?: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'DEACTIVATED';
    roleId?: string;
};

export type RestApiResponseListUserRespondDto = {
    success?: boolean;
    message?: string;
    data?: Array<UserRespondDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type BulkAdminNotificationUpdateRequest = {
    notificationIds?: Array<string>;
    isRead?: boolean;
};

export type AdminNotificationDto = {
    id?: string;
    title?: string;
    message?: string;
    type?: 'REPORT' | 'SYSTEM' | 'AUTH' | 'MODERATION' | 'ERROR' | 'QUOTA';
    severity?: 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
    source?: string;
    relatedType?: 'USER' | 'POST' | 'COMMENT' | 'STORAGE' | 'AUTH' | 'SYSTEM';
    relatedId?: string;
    isRead?: boolean;
    createdAt?: Date;
};

export type RestApiResponseListAdminNotificationDto = {
    success?: boolean;
    message?: string;
    data?: Array<AdminNotificationDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdateNotificationDto = {
    content?: string;
    /**
     * Type of notification event
     */
    type?: 'LIKE_POST' | 'NEW_FOLLOWER' | 'UN_FOLLOWER' | 'COMMENT_POST' | 'LIKE_COMMENT' | 'MENTION_COMMENT' | 'REPLY_COMMENT' | 'REPORT_COMMENT' | 'REPORT_POST' | 'COMMENT_PINNED' | 'SYSTEM_MESSAGE';
    extraData?: {
        [key: string]: unknown;
    };
    isRead?: boolean;
    isDeleted?: boolean;
};

export type UserCreateDto = {
    auth0Id: string;
    username: string;
    email: string;
    status?: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'DEACTIVATED';
};

export type CreateRoleRequest = {
    name: string;
    slug: string;
    description?: string;
    permissionIds?: Array<string>;
};

export type AssignPermissionsToRoleRequest = {
    roleId: string;
    permissionIds: Array<string>;
};

export type CreatePermissionRequest = {
    name: string;
    slug: string;
    description?: string;
    module: string;
};

export type RestApiResponseMapStringObject = {
    success?: boolean;
    message?: string;
    data?: {
        [key: string]: unknown;
    };
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UploadCompleteRequest = {
    publicId: string;
    secureUrl?: string;
    resourceType: string;
    format: string;
    bytes: bigint;
    width: number;
    height: number;
    originalFilename: string;
};

export type RestApiResponseAssetRespond = {
    success?: boolean;
    message?: string;
    data?: AssetRespond;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CreateReportRequest = {
    reason: string;
    itemType: 'POST' | 'COMMENT' | 'USER';
    postId?: string;
    commentId?: string;
    reportedUserId?: string;
};

export type CreatePostRequest = {
    caption: string;
    description?: string;
    videoAsset?: UploadCompleteRequest;
    duration?: number;
    visibility: 'PUBLIC' | 'FRIENDS' | 'PRIVATE';
    tags?: Array<string>;
    categoryName: string;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
};

export type PostCreatedDto = {
    id?: string;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
};

export type RestApiResponsePostCreatedDto = {
    success?: boolean;
    message?: string;
    data?: PostCreatedDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CreatePostInteraction = {
    interactionType: 'LIKE' | 'DISLIKE';
};

export type CreateTagRequest = {
    name: string;
    description: string;
};

export type CreatePostCategoryRequest = {
    name: string;
};

export type PostCategory = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    name: string;
    slug: string;
    description?: string;
};

export type RestApiResponsePostCategory = {
    success?: boolean;
    message?: string;
    data?: PostCategory;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CreateCommentDto = {
    postId: string;
    content: string;
    parentCommentId?: string;
    status?: 'APPROVED' | 'PENDING' | 'SPAM' | 'REJECTED';
};

export type CreateCommentInteraction = {
    interactionType: 'LIKE' | 'DISLIKE';
};

export type CommentInteractionRespond = {
    id?: string;
    user?: UserSummaryRespond;
    interactionType?: string;
    createdAt?: Date;
};

export type RestApiResponseCommentInteractionRespond = {
    success?: boolean;
    message?: string;
    data?: CommentInteractionRespond;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type MaintenanceRequestDto = {
    message?: string;
    completionDateTime?: string;
};

export type MaintenanceInfoDto = {
    active?: boolean;
    message?: string;
    activatedAt?: string;
    completionDateTime?: string;
};

export type RestApiResponseMaintenanceInfoDto = {
    success?: boolean;
    message?: string;
    data?: MaintenanceInfoDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CreateAdminNotification = {
    title?: string;
    message?: string;
    type?: 'REPORT' | 'SYSTEM' | 'AUTH' | 'MODERATION' | 'ERROR' | 'QUOTA';
    severity?: 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
    source?: string;
    relatedType?: 'USER' | 'POST' | 'COMMENT' | 'STORAGE' | 'AUTH' | 'SYSTEM';
    relatedId?: string;
};

export type RestApiResponseAdminNotificationDto = {
    success?: boolean;
    message?: string;
    data?: AdminNotificationDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CreateNotificationRequest = {
    recipientUserId: string;
    postId?: string;
    commentId?: string;
    content: string;
    /**
     * Type of notification event
     */
    type: 'LIKE_POST' | 'NEW_FOLLOWER' | 'UN_FOLLOWER' | 'COMMENT_POST' | 'LIKE_COMMENT' | 'MENTION_COMMENT' | 'REPLY_COMMENT' | 'REPORT_COMMENT' | 'REPORT_POST' | 'COMMENT_PINNED' | 'SYSTEM_MESSAGE';
    extraData?: {
        [key: string]: unknown;
    };
};

export type CreateLogEntryRequest = {
    severity: 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
    message: string;
    source: string;
    userId?: string;
    context?: {
        [key: string]: unknown;
    };
};

export type LogEntryDto = {
    id?: string;
    timestamp?: Date;
    severity?: 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
    message?: string;
    source?: string;
    userId?: string;
    context?: {
        [key: string]: unknown;
    };
    createdAt?: Date;
};

export type RestApiResponseLogEntryDto = {
    success?: boolean;
    message?: string;
    data?: LogEntryDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UpdatePostCategoryRequest = {
    name: string;
};

export type PostCategorySummary = {
    createdAt?: Date;
    id?: string;
    name: string;
};

export type RestApiResponsePostCategorySummary = {
    success?: boolean;
    message?: string;
    data?: PostCategorySummary;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseBoolean = {
    success?: boolean;
    message?: string;
    data?: boolean;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseUserSummaryRespond = {
    success?: boolean;
    message?: string;
    data?: UserSummaryRespond;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseUserIntroduction = {
    success?: boolean;
    message?: string;
    data?: UserIntroduction;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type UserIntroduction = {
    createdAt?: Date;
    updatedAt?: Date;
    id?: string;
    displayName?: string;
    username?: string;
    email?: string;
    bio?: string;
    profileImage?: string;
    coverImage?: string;
    role?: RoleDto;
    status?: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'DEACTIVATED';
    lastLogin?: Date;
    isLogin?: boolean;
};

export type RestApiResponseListRoleDto = {
    success?: boolean;
    message?: string;
    data?: Array<RoleDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListPermissionDto = {
    success?: boolean;
    message?: string;
    data?: Array<PermissionDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseUserLoginStatusDto = {
    success?: boolean;
    message?: string;
    data?: UserLoginStatusDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseString = {
    success?: boolean;
    message?: string;
    data?: string;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type PostViewRespond = {
    totalView?: bigint;
};

export type RestApiResponsePostViewRespond = {
    success?: boolean;
    message?: string;
    data?: PostViewRespond;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type PostInteractionResponse = {
    id?: string;
    user?: UserSummaryRespond;
    interaction?: 'LIKE' | 'DISLIKE';
    createdAt?: Date;
};

export type RestApiResponseListPostInteractionResponse = {
    success?: boolean;
    message?: string;
    data?: Array<PostInteractionResponse>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseTotalPostResponse = {
    success?: boolean;
    message?: string;
    data?: TotalPostResponse;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type TotalPostResponse = {
    totalPosts?: bigint;
};

export type RestApiResponseListTagResponse = {
    success?: boolean;
    message?: string;
    data?: Array<TagResponse>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListTagWithCountDto = {
    success?: boolean;
    message?: string;
    data?: Array<TagWithCountDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type TagWithCountDto = {
    id?: string;
    name?: string;
    slug?: string;
    description?: string;
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    postCount?: bigint;
};

export type RestApiResponseTagWithCountDto = {
    success?: boolean;
    message?: string;
    data?: TagWithCountDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListString = {
    success?: boolean;
    message?: string;
    data?: Array<string>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListPostCategory = {
    success?: boolean;
    message?: string;
    data?: Array<PostCategory>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type PostCategoryWithCountDto = {
    id?: string;
    name?: string;
    description?: string;
    slug?: string;
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    postCount?: bigint;
};

export type RestApiResponseListPostCategoryWithCountDto = {
    success?: boolean;
    message?: string;
    data?: Array<PostCategoryWithCountDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponsePostCategoryWithCountDto = {
    success?: boolean;
    message?: string;
    data?: PostCategoryWithCountDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type NotificationResponse = {
    id?: string;
    recipientUser?: UserSummaryRespond;
    senderUser?: UserSummaryRespond;
    post?: PostSummaryResponse;
    comment?: CommentDto;
    content?: string;
    /**
     * Type of notification event
     */
    type?: 'LIKE_POST' | 'NEW_FOLLOWER' | 'UN_FOLLOWER' | 'COMMENT_POST' | 'LIKE_COMMENT' | 'MENTION_COMMENT' | 'REPLY_COMMENT' | 'REPORT_COMMENT' | 'REPORT_POST' | 'COMMENT_PINNED' | 'SYSTEM_MESSAGE';
    extraData?: {
        [key: string]: unknown;
    };
    isRead?: boolean;
    isDeleted?: boolean;
    createdAt?: Date;
    deletedAt?: Date;
};

export type RestApiResponseNotificationResponse = {
    success?: boolean;
    message?: string;
    data?: NotificationResponse;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type NotificationCount = {
    count?: number;
    unreadCount?: number;
};

export type NotificationStatistic = {
    allCount?: number;
    allUnreadCount?: number;
    stats?: {
        [key: string]: NotificationCount;
    };
};

export type RestApiResponseNotificationStatistic = {
    success?: boolean;
    message?: string;
    data?: NotificationStatistic;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListNotificationResponse = {
    success?: boolean;
    message?: string;
    data?: Array<NotificationResponse>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type ActivityType = {
    id?: number;
    code?: string;
    name?: string;
    description?: string;
    category?: string;
};

export type HistoryActivityDto = {
    id?: string;
    activityType?: ActivityType;
    activityDescription?: string;
    activityDetail?: {
        [key: string]: unknown;
    };
    targetId?: string;
    targetType?: string;
    user?: UserSummaryRespond;
    userAgent?: string;
    ipAddress?: string;
    createdAt?: Date;
};

export type RestApiResponseListHistoryActivityDto = {
    success?: boolean;
    message?: string;
    data?: Array<HistoryActivityDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type ActivityDisplayDto = {
    id?: string;
    parts?: Array<ActivityPart>;
    createdAt?: Date;
};

export type ActivityPart = {
    type?: string;
    value?: string;
    entity?: string;
    id?: string;
    label?: string;
};

export type RestApiResponseListActivityDisplayDto = {
    success?: boolean;
    message?: string;
    data?: Array<ActivityDisplayDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type FollowOverview = {
    isMeFollowing?: boolean;
    totalFollowers?: number;
    totalFollowing?: number;
};

export type RestApiResponseFollowOverview = {
    success?: boolean;
    message?: string;
    data?: FollowOverview;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type FollowOneSideRespond = {
    user?: UserIntroduction;
    createdAt?: Date;
};

export type RestApiResponseListFollowOneSideRespond = {
    success?: boolean;
    message?: string;
    data?: Array<FollowOneSideRespond>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type FeedPage = {
    post?: PostResponse;
    statistic?: PostStatistic;
};

export type PostStatistic = {
    totalLikes?: bigint;
    totalComments?: bigint;
    totalBookmarks?: bigint;
    totalViews?: bigint;
    isLiked?: boolean;
    isBookmarked?: boolean;
};

export type RestApiResponseListFeedPage = {
    success?: boolean;
    message?: string;
    data?: Array<FeedPage>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseFeedPage = {
    success?: boolean;
    message?: string;
    data?: FeedPage;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListCommentInteractionRespond = {
    success?: boolean;
    message?: string;
    data?: Array<CommentInteractionRespond>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type OverviewStatistic = {
    title?: string;
    value?: string;
    trend?: number;
    message?: string;
    description?: string;
};

export type RestApiResponseListOverviewStatistic = {
    success?: boolean;
    message?: string;
    data?: Array<OverviewStatistic>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type DailyPendingAndResolvedDto = {
    date?: Date;
    pendingCount?: bigint;
    resolvedCount?: bigint;
};

export type RestApiResponseListDailyPendingAndResolvedDto = {
    success?: boolean;
    message?: string;
    data?: Array<DailyPendingAndResolvedDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type DailyCountDto = {
    date?: Date;
    count?: bigint;
};

export type RestApiResponseListDailyCountDto = {
    success?: boolean;
    message?: string;
    data?: Array<DailyCountDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseMapStringListDailyCountDto = {
    success?: boolean;
    message?: string;
    data?: {
        [key: string]: Array<DailyCountDto>;
    };
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseMapStringLong = {
    success?: boolean;
    message?: string;
    data?: {
        [key: string]: bigint;
    };
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListUserSummaryRespond = {
    success?: boolean;
    message?: string;
    data?: Array<UserSummaryRespond>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListUserIntroduction = {
    success?: boolean;
    message?: string;
    data?: Array<UserIntroduction>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type DatabaseColumnDto = {
    name?: string;
    type?: string;
    size?: number;
    nullable?: boolean;
    isPrimaryKey?: boolean;
    isForeignKey?: boolean;
    relationship?: DatabaseRelationshipDto;
};

export type DatabaseRelationshipDto = {
    referencedTable?: string;
    referencedColumn?: string;
};

export type DatabaseSchemaDto = {
    tables?: {
        [key: string]: Array<DatabaseColumnDto>;
    };
};

export type RestApiResponseDatabaseSchemaDto = {
    success?: boolean;
    message?: string;
    data?: DatabaseSchemaDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type PostAdminViewDto = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    user?: UserSummaryRespond;
    caption?: string;
    description?: string;
    duration?: number;
    visibility?: 'PUBLIC' | 'FRIENDS' | 'PRIVATE';
    tags?: Array<string>;
    videoPlaybackUrl?: string;
    videoThumbnailUrl?: string;
    videoAsset?: AssetRespond;
    isAuthorDeleted?: boolean;
    status?: 'DRAFT' | 'PENDING_REVIEW' | 'PUBLISHED' | 'REJECTED' | 'ARCHIVED';
    totalViews?: bigint;
    totalInteractions?: bigint;
    category?: PostCategorySummary;
};

export type RestApiResponsePostAdminViewDto = {
    success?: boolean;
    message?: string;
    data?: PostAdminViewDto;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListPostAdminViewDto = {
    success?: boolean;
    message?: string;
    data?: Array<PostAdminViewDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListLogEntryDto = {
    success?: boolean;
    message?: string;
    data?: Array<LogEntryDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type CommentResponseWithPostDetails = {
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
    id?: string;
    post?: PostSummaryResponse;
    user?: UserSummaryRespond;
    content?: string;
    parentCommentId?: string;
    parentCommentUser?: UserSummaryRespond;
    parentCommentContent?: string;
    isPinned?: boolean;
    isAuthorDeleted?: boolean;
    status?: 'APPROVED' | 'PENDING' | 'SPAM' | 'REJECTED';
    interactionCount?: bigint;
};

export type RestApiResponseListCommentResponseWithPostDetails = {
    success?: boolean;
    message?: string;
    data?: Array<CommentResponseWithPostDetails>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type RestApiResponseListTopTagUsageDto = {
    success?: boolean;
    message?: string;
    data?: Array<TopTagUsageDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type TopTagUsageDto = {
    id?: string;
    tagName?: string;
    postDate?: Date;
    postCount?: bigint;
    rank?: number;
};

export type RestApiResponseListTopCategoryUsageDto = {
    success?: boolean;
    message?: string;
    data?: Array<TopCategoryUsageDto>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type TopCategoryUsageDto = {
    id?: string;
    categoryName?: string;
    postDate?: Date;
    postCount?: bigint;
    rank?: number;
};

export type FollowRespond = {
    follower?: UserSummaryRespond;
    following?: UserSummaryRespond;
    createdAt?: Date;
};

export type RestApiResponseListFollowRespond = {
    success?: boolean;
    message?: string;
    data?: Array<FollowRespond>;
    error?: ApiErrorResponse;
    timestamp?: Date;
    metadata?: ResponseMetadata;
};

export type BulkRoleDeleteRequest = {
    roleIds?: Array<string>;
};

export type BulkPermissionDeleteRequest = {
    permissionIds?: Array<string>;
};

export type BulkReportDeleteRequest = {
    reportIds?: Array<string>;
};

export type BulkTagDeleteRequest = {
    tagIds?: Array<string>;
};

export type BulkPostCategoryDeleteRequest = {
    postCategoryIds: Array<string>;
};

export type BulkUserDeleteRequest = {
    userIds: Array<string>;
};

export type BulkPostDeleteRequest = {
    postIds: Array<string>;
};

export type BulkAdminNotificationDeleteRequest = {
    notificationIds?: Array<string>;
};

export type BulkLogDeleteRequest = {
    logIds?: Array<string>;
};

export type RestoreUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/restore';
};

export type RestoreUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type RestoreUserResponse = RestoreUserResponses[keyof RestoreUserResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/roles/{id}';
};

export type DeleteRoleResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type GetRoleByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/roles/{id}';
};

export type GetRoleByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type GetRoleByIdResponse = GetRoleByIdResponses[keyof GetRoleByIdResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/roles/{id}';
};

export type UpdateRoleResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type DeletePermissionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/permissions/{id}';
};

export type DeletePermissionResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeletePermissionResponse = DeletePermissionResponses[keyof DeletePermissionResponses];

export type GetPermissionByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/permissions/{id}';
};

export type GetPermissionByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponsePermissionDto;
};

export type GetPermissionByIdResponse = GetPermissionByIdResponses[keyof GetPermissionByIdResponses];

export type UpdatePermissionData = {
    body: UpdatePermissionRequest;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/permissions/{id}';
};

export type UpdatePermissionResponses = {
    /**
     * OK
     */
    200: RestApiResponsePermissionDto;
};

export type UpdatePermissionResponse = UpdatePermissionResponses[keyof UpdatePermissionResponses];

export type UpdateUserImageData = {
    body: UserImageUpdate;
    path?: never;
    query?: never;
    url: '/api/users/me/update-image';
};

export type UpdateUserImageResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateUserImageResponse = UpdateUserImageResponses[keyof UpdateUserImageResponses];

export type UpdateCurrentUserInfoData = {
    body: UserUpdateInfoDto;
    path?: never;
    query?: never;
    url: '/api/users/me/info';
};

export type UpdateCurrentUserInfoResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateCurrentUserInfoResponse = UpdateCurrentUserInfoResponses[keyof UpdateCurrentUserInfoResponses];

export type UpdateUserAccountData = {
    body: UserAccountUpdate;
    path?: never;
    query?: never;
    url: '/api/users/me/account';
};

export type UpdateUserAccountResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateUserAccountResponse = UpdateUserAccountResponses[keyof UpdateUserAccountResponses];

export type GetUserLoginStatusData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/login/{userId}/status';
};

export type GetUserLoginStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserLoginStatusDto;
};

export type GetUserLoginStatusResponse = GetUserLoginStatusResponses[keyof GetUserLoginStatusResponses];

export type UpdateUserLoginStatusData = {
    body: UserLoginStatusDto;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/login/{userId}/status';
};

export type UpdateUserLoginStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateUserLoginStatusResponse = UpdateUserLoginStatusResponses[keyof UpdateUserLoginStatusResponses];

export type GetLoginStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/login/status';
};

export type GetLoginStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserLoginStatusDto;
};

export type GetLoginStatusResponse = GetLoginStatusResponses[keyof GetLoginStatusResponses];

export type UpdateLoginStatusData = {
    body: UserLoginStatusDto;
    path?: never;
    query?: never;
    url: '/api/users/login/status';
};

export type UpdateLoginStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateLoginStatusResponse = UpdateLoginStatusResponses[keyof UpdateLoginStatusResponses];

export type GetMySettingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/settings/me';
};

export type GetMySettingResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserSettingDto;
};

export type GetMySettingResponse = GetMySettingResponses[keyof GetMySettingResponses];

export type UpdateMySettingData = {
    body: UserSettingDto;
    path?: never;
    query?: never;
    url: '/api/settings/me';
};

export type UpdateMySettingResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserSettingDto;
};

export type UpdateMySettingResponse = UpdateMySettingResponses[keyof UpdateMySettingResponses];

export type UpdateReportStatusData = {
    body: 'PENDING' | 'REVIEWED_APPROVED' | 'REVIEWED_REJECTED' | 'ACTIONTAKEN_CONTENTREMOVED' | 'ACTIONTAKEN_USERWARNED' | 'ACTIONTAKEN_USERBANNED' | 'RESOLVED';
    path: {
        reportId: string;
    };
    query?: never;
    url: '/api/reports/{reportId}/status';
};

export type UpdateReportStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseReportDto;
};

export type UpdateReportStatusResponse = UpdateReportStatusResponses[keyof UpdateReportStatusResponses];

export type BulkUpdateReportsData = {
    body: BulkReportUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/reports/bulk-update';
};

export type BulkUpdateReportsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListReportDto;
};

export type BulkUpdateReportsResponse = BulkUpdateReportsResponses[keyof BulkUpdateReportsResponses];

export type DeletePostData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}';
};

export type DeletePostResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeletePostResponse = DeletePostResponses[keyof DeletePostResponses];

export type GetPostByIdData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}';
};

export type GetPostByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostResponse;
};

export type GetPostByIdResponse = GetPostByIdResponses[keyof GetPostByIdResponses];

export type UpdatePostData = {
    body: UpdatePostRequest;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}';
};

export type UpdatePostResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostResponse;
};

export type UpdatePostResponse = UpdatePostResponses[keyof UpdatePostResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        tagId: string;
    };
    query?: never;
    url: '/api/posts/tags/{tagId}';
};

export type DeleteTagResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagByIdData = {
    body?: never;
    path: {
        tagId: string;
    };
    query?: never;
    url: '/api/posts/tags/{tagId}';
};

export type GetTagByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagResponse;
};

export type GetTagByIdResponse = GetTagByIdResponses[keyof GetTagByIdResponses];

export type UpdateTagData = {
    body: UpdateTagRequest;
    path: {
        tagId: string;
    };
    query?: never;
    url: '/api/posts/tags/{tagId}';
};

export type UpdateTagResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagResponse;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type RemoveAllTagsFromPostData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/tags/post/{postId}';
};

export type RemoveAllTagsFromPostResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type RemoveAllTagsFromPostResponse = RemoveAllTagsFromPostResponses[keyof RemoveAllTagsFromPostResponses];

export type UpdatePostTagsData = {
    body: Array<string>;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/tags/post/{postId}';
};

export type UpdatePostTagsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UpdatePostTagsResponse = UpdatePostTagsResponses[keyof UpdatePostTagsResponses];

export type BulkUpdatePostsData = {
    body: BulkPostUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/posts/bulk-update';
};

export type BulkUpdatePostsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type BulkUpdatePostsResponse = BulkUpdatePostsResponses[keyof BulkUpdatePostsResponses];

export type DeleteCommentData = {
    body?: never;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}';
};

export type DeleteCommentResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteCommentResponse = DeleteCommentResponses[keyof DeleteCommentResponses];

export type GetCommentByIdData = {
    body?: never;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}';
};

export type GetCommentByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseCommentRespond;
};

export type GetCommentByIdResponse = GetCommentByIdResponses[keyof GetCommentByIdResponses];

export type UpdateCommentData = {
    body: UpdateCommentContentDto;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}';
};

export type UpdateCommentResponses = {
    /**
     * OK
     */
    200: RestApiResponseCommentRespond;
};

export type UpdateCommentResponse = UpdateCommentResponses[keyof UpdateCommentResponses];

export type BulkUpdateCommentsData = {
    body: BulkCommentUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/comments/bulk-update';
};

export type BulkUpdateCommentsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListCommentRespond;
};

export type BulkUpdateCommentsResponse = BulkUpdateCommentsResponses[keyof BulkUpdateCommentsResponses];

export type UpdateUserInfoData = {
    body: UserUpdateInfoDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/users/{id}/info';
};

export type UpdateUserInfoResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateUserInfoResponse = UpdateUserInfoResponses[keyof UpdateUserInfoResponses];

export type UpdateUserAccount1Data = {
    body: UserAccountUpdate;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/users/{id}/account';
};

export type UpdateUserAccount1Responses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type UpdateUserAccount1Response = UpdateUserAccount1Responses[keyof UpdateUserAccount1Responses];

export type BulkUpdateUsersData = {
    body: BulkUserUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/admin/users/bulk-update';
};

export type BulkUpdateUsersResponses = {
    /**
     * OK
     */
    200: RestApiResponseListUserRespondDto;
};

export type BulkUpdateUsersResponse = BulkUpdateUsersResponses[keyof BulkUpdateUsersResponses];

export type BulkDeletePostsData = {
    body: BulkPostDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/admin/posts/bulk';
};

export type BulkDeletePostsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeletePostsResponse = BulkDeletePostsResponses[keyof BulkDeletePostsResponses];

export type BulkUpdatePosts1Data = {
    body: BulkPostUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/admin/posts/bulk';
};

export type BulkUpdatePosts1Responses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type BulkUpdatePosts1Response = BulkUpdatePosts1Responses[keyof BulkUpdatePosts1Responses];

export type BulkUpdateNotificationsData = {
    body: BulkAdminNotificationUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/admin/notifications/bulk-update';
};

export type BulkUpdateNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListAdminNotificationDto;
};

export type BulkUpdateNotificationsResponse = BulkUpdateNotificationsResponses[keyof BulkUpdateNotificationsResponses];

export type UpdateNotificationByIdData = {
    body: UpdateNotificationDto;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/admin/notification-client/{notificationId}';
};

export type UpdateNotificationByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UpdateNotificationByIdResponse = UpdateNotificationByIdResponses[keyof UpdateNotificationByIdResponses];

export type CreateUserData = {
    body: UserCreateDto;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetAllRolesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/users/roles';
};

export type GetAllRolesResponses = {
    /**
     * OK
     */
    200: RestApiResponseListRoleDto;
};

export type GetAllRolesResponse = GetAllRolesResponses[keyof GetAllRolesResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    path?: never;
    query?: never;
    url: '/api/users/roles';
};

export type CreateRoleResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type SyncPermissionsForRoleData = {
    body: Array<string>;
    path: {
        roleId: string;
    };
    query?: never;
    url: '/api/users/roles/{roleId}/permissions/sync';
};

export type SyncPermissionsForRoleResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type SyncPermissionsForRoleResponse = SyncPermissionsForRoleResponses[keyof SyncPermissionsForRoleResponses];

export type AssignPermissionsToRoleData = {
    body: AssignPermissionsToRoleRequest;
    path?: never;
    query?: never;
    url: '/api/users/roles/permissions/assign';
};

export type AssignPermissionsToRoleResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type AssignPermissionsToRoleResponse = AssignPermissionsToRoleResponses[keyof AssignPermissionsToRoleResponses];

export type GetAllPermissionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/users/permissions';
};

export type GetAllPermissionsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPermissionDto;
};

export type GetAllPermissionsResponse = GetAllPermissionsResponses[keyof GetAllPermissionsResponses];

export type CreatePermissionData = {
    body: CreatePermissionRequest;
    path?: never;
    query?: never;
    url: '/api/users/permissions';
};

export type CreatePermissionResponses = {
    /**
     * OK
     */
    200: RestApiResponsePermissionDto;
};

export type CreatePermissionResponse = CreatePermissionResponses[keyof CreatePermissionResponses];

export type GenerateUploadSignatureData = {
    body: {
        [key: string]: unknown;
    };
    path?: never;
    query?: never;
    url: '/api/storage/signature';
};

export type GenerateUploadSignatureResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringObject;
};

export type GenerateUploadSignatureResponse = GenerateUploadSignatureResponses[keyof GenerateUploadSignatureResponses];

export type CreateAssetData = {
    body: UploadCompleteRequest;
    path?: never;
    query?: never;
    url: '/api/storage/create';
};

export type CreateAssetResponses = {
    /**
     * OK
     */
    200: RestApiResponseAssetRespond;
};

export type CreateAssetResponse = CreateAssetResponses[keyof CreateAssetResponses];

export type SearchReportsData = {
    body?: never;
    path?: never;
    query?: {
        reporterId?: string;
        reportedUserId?: string;
        status?: 'PENDING' | 'REVIEWED_APPROVED' | 'REVIEWED_REJECTED' | 'ACTIONTAKEN_CONTENTREMOVED' | 'ACTIONTAKEN_USERWARNED' | 'ACTIONTAKEN_USERBANNED' | 'RESOLVED';
        itemType?: 'POST' | 'COMMENT' | 'USER';
        itemId?: string;
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/reports';
};

export type SearchReportsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListReportDto;
};

export type SearchReportsResponse = SearchReportsResponses[keyof SearchReportsResponses];

export type CreateReportData = {
    body: CreateReportRequest;
    path?: never;
    query?: never;
    url: '/api/reports';
};

export type CreateReportResponses = {
    /**
     * OK
     */
    200: RestApiResponseReportDto;
};

export type CreateReportResponse = CreateReportResponses[keyof CreateReportResponses];

export type CreatePostData = {
    body: CreatePostRequest;
    path?: never;
    query?: never;
    url: '/api/posts';
};

export type CreatePostResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCreatedDto;
};

export type CreatePostResponse = CreatePostResponses[keyof CreatePostResponses];

export type RecordViewData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/view';
};

export type RecordViewResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type RecordViewResponse = RecordViewResponses[keyof RecordViewResponses];

export type GetInteractionsByPostIdData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/interactions';
};

export type GetInteractionsByPostIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostInteractionResponse;
};

export type GetInteractionsByPostIdResponse = GetInteractionsByPostIdResponses[keyof GetInteractionsByPostIdResponses];

export type CreateInteractionData = {
    body: CreatePostInteraction;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/interactions';
};

export type CreateInteractionResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type CreateInteractionResponse = CreateInteractionResponses[keyof CreateInteractionResponses];

export type DeleteBookmarkData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/bookmarks';
};

export type DeleteBookmarkResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteBookmarkResponse = DeleteBookmarkResponses[keyof DeleteBookmarkResponses];

export type IsBookmarkedData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/bookmarks';
};

export type IsBookmarkedResponses = {
    /**
     * OK
     */
    200: RestApiResponseBoolean;
};

export type IsBookmarkedResponse = IsBookmarkedResponses[keyof IsBookmarkedResponses];

export type BookmarkPostData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/bookmarks';
};

export type BookmarkPostResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BookmarkPostResponse = BookmarkPostResponses[keyof BookmarkPostResponses];

export type GetAllTagsData = {
    body?: never;
    path?: never;
    query?: {
        name?: string;
        slug?: string;
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/posts/tags';
};

export type GetAllTagsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTagResponse;
};

export type GetAllTagsResponse = GetAllTagsResponses[keyof GetAllTagsResponses];

export type CreateTagData = {
    body: CreateTagRequest;
    path?: never;
    query?: never;
    url: '/api/posts/tags';
};

export type CreateTagResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type AddTagsToPostData = {
    body: Array<string>;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/tags/post/{postId}/add';
};

export type AddTagsToPostResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type AddTagsToPostResponse = AddTagsToPostResponses[keyof AddTagsToPostResponses];

export type GetPostCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/post-categories';
};

export type GetPostCategoriesResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostCategory;
};

export type GetPostCategoriesResponse = GetPostCategoriesResponses[keyof GetPostCategoriesResponses];

export type CreatePostCategoryData = {
    body: CreatePostCategoryRequest;
    path?: never;
    query?: never;
    url: '/api/post-categories';
};

export type CreatePostCategoryResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategory;
};

export type CreatePostCategoryResponse = CreatePostCategoryResponses[keyof CreatePostCategoryResponses];

export type CleanupOldSoftDeletedNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/notifications/cleanup';
};

export type CleanupOldSoftDeletedNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type CleanupOldSoftDeletedNotificationsResponse = CleanupOldSoftDeletedNotificationsResponses[keyof CleanupOldSoftDeletedNotificationsResponses];

export type UnfollowData = {
    body?: never;
    path: {
        followingId: string;
    };
    query?: never;
    url: '/api/follows/{followingId}';
};

export type UnfollowResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UnfollowResponse = UnfollowResponses[keyof UnfollowResponses];

export type FollowData = {
    body?: never;
    path: {
        followingId: string;
    };
    query?: never;
    url: '/api/follows/{followingId}';
};

export type FollowResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type FollowResponse = FollowResponses[keyof FollowResponses];

export type CreateCommentData = {
    body: CreateCommentDto;
    path?: never;
    query?: never;
    url: '/api/comments';
};

export type CreateCommentResponses = {
    /**
     * OK
     */
    200: RestApiResponseCommentRespond;
};

export type CreateCommentResponse = CreateCommentResponses[keyof CreateCommentResponses];

export type GetInteractionsData = {
    body?: never;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}/interactions';
};

export type GetInteractionsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListCommentInteractionRespond;
};

export type GetInteractionsResponse = GetInteractionsResponses[keyof GetInteractionsResponses];

export type CreateInteraction1Data = {
    body: CreateCommentInteraction;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}/interactions';
};

export type CreateInteraction1Responses = {
    /**
     * OK
     */
    200: RestApiResponseCommentInteractionRespond;
};

export type CreateInteraction1Response = CreateInteraction1Responses[keyof CreateInteraction1Responses];

export type EnableMaintenanceData = {
    body?: MaintenanceRequestDto;
    path?: never;
    query?: never;
    url: '/api/admin/system/maintenance/enable';
};

export type EnableMaintenanceResponses = {
    /**
     * OK
     */
    200: RestApiResponseMaintenanceInfoDto;
};

export type EnableMaintenanceResponse = EnableMaintenanceResponses[keyof EnableMaintenanceResponses];

export type DisableMaintenanceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system/maintenance/disable';
};

export type DisableMaintenanceResponses = {
    /**
     * OK
     */
    200: RestApiResponseMaintenanceInfoDto;
};

export type DisableMaintenanceResponse = DisableMaintenanceResponses[keyof DisableMaintenanceResponses];

export type GetAllNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        type?: 'REPORT' | 'SYSTEM' | 'AUTH' | 'MODERATION' | 'ERROR' | 'QUOTA';
        severity?: 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';
        isRead?: boolean;
        createdAfter?: Date;
        createdBefore?: Date;
        title?: string;
        message?: string;
    };
    url: '/api/admin/notifications';
};

export type GetAllNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListAdminNotificationDto;
};

export type GetAllNotificationsResponse = GetAllNotificationsResponses[keyof GetAllNotificationsResponses];

export type CreateNotificationData = {
    body: CreateAdminNotification;
    path?: never;
    query?: never;
    url: '/api/admin/notifications';
};

export type CreateNotificationResponses = {
    /**
     * OK
     */
    200: RestApiResponseAdminNotificationDto;
};

export type CreateNotificationResponse = CreateNotificationResponses[keyof CreateNotificationResponses];

export type CreateAdminNotificationsData = {
    body: CreateNotificationRequest;
    path?: never;
    query?: never;
    url: '/api/admin/notification-client/admin';
};

export type CreateAdminNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type CreateAdminNotificationsResponse = CreateAdminNotificationsResponses[keyof CreateAdminNotificationsResponses];

export type GetAllLogEntriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        severities?: Array<'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL'>;
        messageContains?: string;
        source?: string;
        userId?: string;
        timestampAfter?: Date;
        timestampBefore?: Date;
    };
    url: '/api/admin/logs';
};

export type GetAllLogEntriesResponses = {
    /**
     * OK
     */
    200: RestApiResponseListLogEntryDto;
};

export type GetAllLogEntriesResponse = GetAllLogEntriesResponses[keyof GetAllLogEntriesResponses];

export type CreateLogEntryData = {
    body: CreateLogEntryRequest;
    path?: never;
    query?: never;
    url: '/api/admin/logs';
};

export type CreateLogEntryResponses = {
    /**
     * OK
     */
    200: RestApiResponseLogEntryDto;
};

export type CreateLogEntryResponse = CreateLogEntryResponses[keyof CreateLogEntryResponses];

export type DeletePostCategoryData = {
    body?: never;
    path: {
        postCategoryId: string;
    };
    query?: never;
    url: '/api/post-categories/{postCategoryId}';
};

export type DeletePostCategoryResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeletePostCategoryResponse = DeletePostCategoryResponses[keyof DeletePostCategoryResponses];

export type UpdatePostCategoryData = {
    body: UpdatePostCategoryRequest;
    path: {
        postCategoryId: string;
    };
    query?: never;
    url: '/api/post-categories/{postCategoryId}';
};

export type UpdatePostCategoryResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategorySummary;
};

export type UpdatePostCategoryResponse = UpdatePostCategoryResponses[keyof UpdatePostCategoryResponses];

export type UnmarkNotificationAsReadData = {
    body?: never;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/notifications/{notificationId}/unmark-as-read';
};

export type UnmarkNotificationAsReadResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UnmarkNotificationAsReadResponse = UnmarkNotificationAsReadResponses[keyof UnmarkNotificationAsReadResponses];

export type MarkNotificationAsReadData = {
    body?: never;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/notifications/{notificationId}/mark-as-read';
};

export type MarkNotificationAsReadResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type MarkNotificationAsReadResponse = MarkNotificationAsReadResponses[keyof MarkNotificationAsReadResponses];

export type UnmarkAllNotificationsAsReadData = {
    body?: never;
    path?: never;
    query?: {
        type?: string;
    };
    url: '/api/notifications/unmark-all-as-read';
};

export type UnmarkAllNotificationsAsReadResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UnmarkAllNotificationsAsReadResponse = UnmarkAllNotificationsAsReadResponses[keyof UnmarkAllNotificationsAsReadResponses];

export type MarkAllNotificationsAsReadData = {
    body?: never;
    path?: never;
    query?: {
        type?: string;
    };
    url: '/api/notifications/mark-all-as-read';
};

export type MarkAllNotificationsAsReadResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type MarkAllNotificationsAsReadResponse = MarkAllNotificationsAsReadResponses[keyof MarkAllNotificationsAsReadResponses];

export type UnpinCommentData = {
    body?: never;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}/unpin';
};

export type UnpinCommentResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type UnpinCommentResponse = UnpinCommentResponses[keyof UnpinCommentResponses];

export type PinCommentData = {
    body?: never;
    path: {
        commentId: string;
    };
    query?: never;
    url: '/api/comments/{commentId}/pin';
};

export type PinCommentResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type PinCommentResponse = PinCommentResponses[keyof PinCommentResponses];

export type MarkAsUnreadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/notifications/{id}/unread';
};

export type MarkAsUnreadResponses = {
    /**
     * OK
     */
    200: RestApiResponseAdminNotificationDto;
};

export type MarkAsUnreadResponse = MarkAsUnreadResponses[keyof MarkAsUnreadResponses];

export type MarkAsReadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/notifications/{id}/read';
};

export type MarkAsReadResponses = {
    /**
     * OK
     */
    200: RestApiResponseAdminNotificationDto;
};

export type MarkAsReadResponse = MarkAsReadResponses[keyof MarkAsReadResponses];

export type IsUserExistsData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/users/{userId}/exists';
};

export type IsUserExistsResponses = {
    /**
     * OK
     */
    200: RestApiResponseBoolean;
};

export type IsUserExistsResponse = IsUserExistsResponses[keyof IsUserExistsResponses];

export type GetUserSummaryData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetUserSummaryResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserSummaryRespond;
};

export type GetUserSummaryResponse = GetUserSummaryResponses[keyof GetUserSummaryResponses];

export type GetUserIntroductionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/intro';
};

export type GetUserIntroductionResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserIntroduction;
};

export type GetUserIntroductionResponse = GetUserIntroductionResponses[keyof GetUserIntroductionResponses];

export type GetRoleBySlugData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: never;
    url: '/api/users/roles/slug/{slug}';
};

export type GetRoleBySlugResponses = {
    /**
     * OK
     */
    200: RestApiResponseRoleDto;
};

export type GetRoleBySlugResponse = GetRoleBySlugResponses[keyof GetRoleBySlugResponses];

export type GetPermissionBySlugData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: never;
    url: '/api/users/permissions/slug/{slug}';
};

export type GetPermissionBySlugResponses = {
    /**
     * OK
     */
    200: RestApiResponsePermissionDto;
};

export type GetPermissionBySlugResponse = GetPermissionBySlugResponses[keyof GetPermissionBySlugResponses];

export type DeleteCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type DeleteCurrentUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteCurrentUserResponse = DeleteCurrentUserResponses[keyof DeleteCurrentUserResponses];

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type GetCurrentUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type IsUserExistsByAuth0IdData = {
    body?: never;
    path: {
        auth0Id: string;
    };
    query?: never;
    url: '/api/users/auth0/{auth0Id}/exists';
};

export type IsUserExistsByAuth0IdResponses = {
    /**
     * OK
     */
    200: RestApiResponseBoolean;
};

export type IsUserExistsByAuth0IdResponse = IsUserExistsByAuth0IdResponses[keyof IsUserExistsByAuth0IdResponses];

export type GetVideoThumbnailUrlData = {
    body?: never;
    path: {
        publicId: string;
    };
    query?: never;
    url: '/api/storage/thumbnail-url/{publicId}';
};

export type GetVideoThumbnailUrlResponses = {
    /**
     * OK
     */
    200: RestApiResponseString;
};

export type GetVideoThumbnailUrlResponse = GetVideoThumbnailUrlResponses[keyof GetVideoThumbnailUrlResponses];

export type GetVideoPlaybackUrlData = {
    body?: never;
    path: {
        publicId: string;
    };
    query?: never;
    url: '/api/storage/playback-url/{publicId}';
};

export type GetVideoPlaybackUrlResponses = {
    /**
     * OK
     */
    200: RestApiResponseString;
};

export type GetVideoPlaybackUrlResponse = GetVideoPlaybackUrlResponses[keyof GetVideoPlaybackUrlResponses];

export type GetAssetByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/storage/asset/{id}';
};

export type GetAssetByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseAssetRespond;
};

export type GetAssetByIdResponse = GetAssetByIdResponses[keyof GetAssetByIdResponses];

export type GetAssetByPublicIdData = {
    body?: never;
    path: {
        publicId: string;
    };
    query?: never;
    url: '/api/storage/asset/public/{publicId}';
};

export type GetAssetByPublicIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseAssetRespond;
};

export type GetAssetByPublicIdResponse = GetAssetByPublicIdResponses[keyof GetAssetByPublicIdResponses];

export type DeleteReportData = {
    body?: never;
    path: {
        reportId: string;
    };
    query?: never;
    url: '/api/reports/{reportId}';
};

export type DeleteReportResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteReportResponse = DeleteReportResponses[keyof DeleteReportResponses];

export type GetReportByIdData = {
    body?: never;
    path: {
        reportId: string;
    };
    query?: never;
    url: '/api/reports/{reportId}';
};

export type GetReportByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseReportDto;
};

export type GetReportByIdResponse = GetReportByIdResponses[keyof GetReportByIdResponses];

export type GetAllReportsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/reports/all';
};

export type GetAllReportsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListReportDto;
};

export type GetAllReportsResponse = GetAllReportsResponses[keyof GetAllReportsResponses];

export type GetTotalViewsData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/{postId}/views';
};

export type GetTotalViewsResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostViewRespond;
};

export type GetTotalViewsResponse = GetTotalViewsResponses[keyof GetTotalViewsResponses];

export type HasMeInteractedData = {
    body?: never;
    path: {
        postId: string;
        interactionType: string;
    };
    query?: never;
    url: '/api/posts/{postId}/interactions/{interactionType}/me-is-interacted';
};

export type HasMeInteractedResponses = {
    /**
     * OK
     */
    200: RestApiResponseBoolean;
};

export type HasMeInteractedResponse = HasMeInteractedResponses[keyof HasMeInteractedResponses];

export type GetTotalViewsByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/posts/users/{userId}/total-views';
};

export type GetTotalViewsByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostViewRespond;
};

export type GetTotalViewsByUserIdResponse = GetTotalViewsByUserIdResponses[keyof GetTotalViewsByUserIdResponses];

export type GetCountAllPostsByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/posts/users/{userId}/total-posts';
};

export type GetCountAllPostsByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseTotalPostResponse;
};

export type GetCountAllPostsByUserIdResponse = GetCountAllPostsByUserIdResponses[keyof GetCountAllPostsByUserIdResponses];

export type GetAllPublicPostsByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/posts/users/{userId}/public';
};

export type GetAllPublicPostsByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type GetAllPublicPostsByUserIdResponse = GetAllPublicPostsByUserIdResponses[keyof GetAllPublicPostsByUserIdResponses];

export type GetTagsWithCountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/posts/tags/with-counts';
};

export type GetTagsWithCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTagWithCountDto;
};

export type GetTagsWithCountsResponse = GetTagsWithCountsResponses[keyof GetTagsWithCountsResponses];

export type GetTagWithCountByIdData = {
    body?: never;
    path: {
        tagId: string;
    };
    query?: never;
    url: '/api/posts/tags/with-counts/{tagId}';
};

export type GetTagWithCountByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagWithCountDto;
};

export type GetTagWithCountByIdResponse = GetTagWithCountByIdResponses[keyof GetTagWithCountByIdResponses];

export type GetTagWithCountBySlugData = {
    body?: never;
    path: {
        slug: string;
    };
    query?: never;
    url: '/api/posts/tags/with-counts/slug/{slug}';
};

export type GetTagWithCountBySlugResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagWithCountDto;
};

export type GetTagWithCountBySlugResponse = GetTagWithCountBySlugResponses[keyof GetTagWithCountBySlugResponses];

export type GetTagWithCountByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/posts/tags/with-counts/name/{name}';
};

export type GetTagWithCountByNameResponses = {
    /**
     * OK
     */
    200: RestApiResponseTagWithCountDto;
};

export type GetTagWithCountByNameResponse = GetTagWithCountByNameResponses[keyof GetTagWithCountByNameResponses];

export type GetTagNamesByPostIdData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/tags/names/by-post/{postId}';
};

export type GetTagNamesByPostIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListString;
};

export type GetTagNamesByPostIdResponse = GetTagNamesByPostIdResponses[keyof GetTagNamesByPostIdResponses];

export type GetTagsByPostIdData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/posts/tags/by-post/{postId}';
};

export type GetTagsByPostIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTagResponse;
};

export type GetTagsByPostIdResponse = GetTagsByPostIdResponses[keyof GetTagsByPostIdResponses];

export type GetAllTagsWithCountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/posts/tags/all-with-counts';
};

export type GetAllTagsWithCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTagWithCountDto;
};

export type GetAllTagsWithCountsResponse = GetAllTagsWithCountsResponses[keyof GetAllTagsWithCountsResponses];

export type GetAllPublicPostsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/posts/public';
};

export type GetAllPublicPostsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type GetAllPublicPostsResponse = GetAllPublicPostsResponses[keyof GetAllPublicPostsResponses];

export type GetMeAllPostsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/posts/me';
};

export type GetMeAllPostsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type GetMeAllPostsResponse = GetMeAllPostsResponses[keyof GetMeAllPostsResponses];

export type GetPostCategoryByNameData = {
    body?: never;
    path: {
        postCategoryName: string;
    };
    query?: never;
    url: '/api/post-categories/{postCategoryName}';
};

export type GetPostCategoryByNameResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategorySummary;
};

export type GetPostCategoryByNameResponse = GetPostCategoryByNameResponses[keyof GetPostCategoryByNameResponses];

export type GetCategoriesWithCountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/post-categories/with-counts';
};

export type GetCategoriesWithCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostCategoryWithCountDto;
};

export type GetCategoriesWithCountsResponse = GetCategoriesWithCountsResponses[keyof GetCategoriesWithCountsResponses];

export type GetCategoryWithCountByNameData = {
    body?: never;
    path: {
        postCategoryName: string;
    };
    query?: never;
    url: '/api/post-categories/with-counts/{postCategoryName}';
};

export type GetCategoryWithCountByNameResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategoryWithCountDto;
};

export type GetCategoryWithCountByNameResponse = GetCategoryWithCountByNameResponses[keyof GetCategoryWithCountByNameResponses];

export type GetCategoryWithCountByIdData = {
    body?: never;
    path: {
        postCategoryId: string;
    };
    query?: never;
    url: '/api/post-categories/with-counts/id/{postCategoryId}';
};

export type GetCategoryWithCountByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategoryWithCountDto;
};

export type GetCategoryWithCountByIdResponse = GetCategoryWithCountByIdResponses[keyof GetCategoryWithCountByIdResponses];

export type GetPostCategoryByIdData = {
    body?: never;
    path: {
        postCategoryId: string;
    };
    query?: never;
    url: '/api/post-categories/id/{postCategoryId}';
};

export type GetPostCategoryByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostCategorySummary;
};

export type GetPostCategoryByIdResponse = GetPostCategoryByIdResponses[keyof GetPostCategoryByIdResponses];

export type GetAllCategoriesWithCountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/post-categories/all-with-counts';
};

export type GetAllCategoriesWithCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostCategoryWithCountDto;
};

export type GetAllCategoriesWithCountsResponse = GetAllCategoriesWithCountsResponses[keyof GetAllCategoriesWithCountsResponses];

export type GetNotificationByIdData = {
    body?: never;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/notifications/{notificationId}';
};

export type GetNotificationByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseNotificationResponse;
};

export type GetNotificationByIdResponse = GetNotificationByIdResponses[keyof GetNotificationByIdResponses];

export type GetNotificationStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/notifications/statistics';
};

export type GetNotificationStatisticsResponses = {
    /**
     * OK
     */
    200: RestApiResponseNotificationStatistic;
};

export type GetNotificationStatisticsResponse = GetNotificationStatisticsResponses[keyof GetNotificationStatisticsResponses];

export type GetMyNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        /**
         * Type of notification event
         */
        type?: 'LIKE_POST' | 'NEW_FOLLOWER' | 'UN_FOLLOWER' | 'COMMENT_POST' | 'LIKE_COMMENT' | 'MENTION_COMMENT' | 'REPLY_COMMENT' | 'REPORT_COMMENT' | 'REPORT_POST' | 'COMMENT_PINNED' | 'SYSTEM_MESSAGE';
        groupType?: string;
        isRead?: boolean;
        isDeleted?: boolean;
        includeRecipientUser?: boolean;
        createdAt?: Date;
        deletedAt?: Date;
    };
    url: '/api/notifications/my';
};

export type GetMyNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListNotificationResponse;
};

export type GetMyNotificationsResponse = GetMyNotificationsResponses[keyof GetMyNotificationsResponses];

export type GetHistoriesByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/histories/users/{userId}';
};

export type GetHistoriesByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListHistoryActivityDto;
};

export type GetHistoriesByUserIdResponse = GetHistoriesByUserIdResponses[keyof GetHistoriesByUserIdResponses];

export type GetHistoriesForMeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/histories/me';
};

export type GetHistoriesForMeResponses = {
    /**
     * OK
     */
    200: RestApiResponseListActivityDisplayDto;
};

export type GetHistoriesForMeResponse = GetHistoriesForMeResponses[keyof GetHistoriesForMeResponses];

export type GetOverviewData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/follows/{userId}/overview';
};

export type GetOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseFollowOverview;
};

export type GetOverviewResponse = GetOverviewResponses[keyof GetOverviewResponses];

export type GetFollowingByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/follows/{userId}/following';
};

export type GetFollowingByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFollowOneSideRespond;
};

export type GetFollowingByUserIdResponse = GetFollowingByUserIdResponses[keyof GetFollowingByUserIdResponses];

export type GetFollowersByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/follows/{userId}/followers';
};

export type GetFollowersByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFollowOneSideRespond;
};

export type GetFollowersByUserIdResponse = GetFollowersByUserIdResponses[keyof GetFollowersByUserIdResponses];

export type GetMyFollowingData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/follows/me/following';
};

export type GetMyFollowingResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFollowOneSideRespond;
};

export type GetMyFollowingResponse = GetMyFollowingResponses[keyof GetMyFollowingResponses];

export type GetMyFollowersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/follows/me/followers';
};

export type GetMyFollowersResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFollowOneSideRespond;
};

export type GetMyFollowersResponse = GetMyFollowersResponses[keyof GetMyFollowersResponses];

export type IsFriendData = {
    body?: never;
    path: {
        followerId: string;
        followingId: string;
    };
    query?: never;
    url: '/api/follows/friend-check/{followerId}/{followingId}';
};

export type IsFriendResponses = {
    /**
     * OK
     */
    200: RestApiResponseBoolean;
};

export type IsFriendResponse = IsFriendResponses[keyof IsFriendResponses];

export type GetFeedData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        excludePostId?: string;
        categoryName?: string;
    };
    url: '/api/feeds';
};

export type GetFeedResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFeedPage;
};

export type GetFeedResponse = GetFeedResponses[keyof GetFeedResponses];

export type GetFeedByUserIdData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        excludePostId?: string;
    };
    url: '/api/feeds/users/{userId}';
};

export type GetFeedByUserIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFeedPage;
};

export type GetFeedByUserIdResponse = GetFeedByUserIdResponses[keyof GetFeedByUserIdResponses];

export type GetFeed1Data = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/feeds/posts/{postId}';
};

export type GetFeed1Responses = {
    /**
     * OK
     */
    200: RestApiResponseFeedPage;
};

export type GetFeed1Response = GetFeed1Responses[keyof GetFeed1Responses];

export type GetAllCommentsByPostIdData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/comments/posts/{postId}';
};

export type GetAllCommentsByPostIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListCommentRespond;
};

export type GetAllCommentsByPostIdResponse = GetAllCommentsByPostIdResponses[keyof GetAllCommentsByPostIdResponses];

export type GetModerationOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/moderation/overview';
};

export type GetModerationOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetModerationOverviewResponse = GetModerationOverviewResponses[keyof GetModerationOverviewResponses];

export type GetUserModerationOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/moderation/overview/user';
};

export type GetUserModerationOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetUserModerationOverviewResponse = GetUserModerationOverviewResponses[keyof GetUserModerationOverviewResponses];

export type GetPostModerationOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/moderation/overview/post';
};

export type GetPostModerationOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetPostModerationOverviewResponse = GetPostModerationOverviewResponses[keyof GetPostModerationOverviewResponses];

export type GetCommentModerationOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/moderation/overview/comment';
};

export type GetCommentModerationOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetCommentModerationOverviewResponse = GetCommentModerationOverviewResponses[keyof GetCommentModerationOverviewResponses];

export type GetDailyPendingAndResolvedReportsData = {
    body?: never;
    path?: never;
    query: {
        days: number;
        itemType?: 'POST' | 'COMMENT' | 'USER';
    };
    url: '/api/analytics/moderation/daily-pending-resolved';
};

export type GetDailyPendingAndResolvedReportsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyPendingAndResolvedDto;
};

export type GetDailyPendingAndResolvedReportsResponse = GetDailyPendingAndResolvedReportsResponses[keyof GetDailyPendingAndResolvedReportsResponses];

export type GetLogOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/logs/overview';
};

export type GetLogOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetLogOverviewResponse = GetLogOverviewResponses[keyof GetLogOverviewResponses];

export type GetDailyErrorLogsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/analytics/logs/daily-errors';
};

export type GetDailyErrorLogsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyErrorLogsResponse = GetDailyErrorLogsResponses[keyof GetDailyErrorLogsResponses];

export type GetDailyLogsBySeverityData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/analytics/logs/daily-by-severity';
};

export type GetDailyLogsBySeverityResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringListDailyCountDto;
};

export type GetDailyLogsBySeverityResponse = GetDailyLogsBySeverityResponses[keyof GetDailyLogsBySeverityResponses];

export type GetNotificationTrendsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/analytics/admin-notifications/trends';
};

export type GetNotificationTrendsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetNotificationTrendsResponse = GetNotificationTrendsResponses[keyof GetNotificationTrendsResponses];

export type GetAdminNotificationOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/admin-notifications/overview';
};

export type GetAdminNotificationOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetAdminNotificationOverviewResponse = GetAdminNotificationOverviewResponses[keyof GetAdminNotificationOverviewResponses];

export type GetNotificationsByTypeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/admin-notifications/by-type';
};

export type GetNotificationsByTypeResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringLong;
};

export type GetNotificationsByTypeResponse = GetNotificationsByTypeResponses[keyof GetNotificationsByTypeResponses];

export type GetNotificationsBySeverityData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/analytics/admin-notifications/by-severity';
};

export type GetNotificationsBySeverityResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringLong;
};

export type GetNotificationsBySeverityResponse = GetNotificationsBySeverityResponses[keyof GetNotificationsBySeverityResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/users';
};

export type GetAllUsersResponses = {
    /**
     * OK
     */
    200: RestApiResponseListUserSummaryRespond;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/users/{id}';
};

export type DeleteUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/users/{id}';
};

export type GetUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseUserRespondDto;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetAllUserIntroductionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/users/intro/all';
};

export type GetAllUserIntroductionsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListUserIntroduction;
};

export type GetAllUserIntroductionsResponse = GetAllUserIntroductionsResponses[keyof GetAllUserIntroductionsResponses];

export type GetSystemStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system/status';
};

export type GetSystemStatusResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringObject;
};

export type GetSystemStatusResponse = GetSystemStatusResponses[keyof GetSystemStatusResponses];

export type GetStatusMaintenanceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system/maintenance';
};

export type GetStatusMaintenanceResponses = {
    /**
     * OK
     */
    200: RestApiResponseMaintenanceInfoDto;
};

export type GetStatusMaintenanceResponse = GetStatusMaintenanceResponses[keyof GetStatusMaintenanceResponses];

export type GetDatabaseSchemaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system/database-schema';
};

export type GetDatabaseSchemaResponses = {
    /**
     * OK
     */
    200: RestApiResponseDatabaseSchemaDto;
};

export type GetDatabaseSchemaResponse = GetDatabaseSchemaResponses[keyof GetDatabaseSchemaResponses];

export type GetAllPostsForAdminData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/posts';
};

export type GetAllPostsForAdminResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostResponse;
};

export type GetAllPostsForAdminResponse = GetAllPostsForAdminResponses[keyof GetAllPostsForAdminResponses];

export type DeletePost1Data = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/admin/posts/{postId}';
};

export type DeletePost1Responses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeletePost1Response = DeletePost1Responses[keyof DeletePost1Responses];

export type GetPostByIdForAdminData = {
    body?: never;
    path: {
        postId: string;
    };
    query?: never;
    url: '/api/admin/posts/{postId}';
};

export type GetPostByIdForAdminResponses = {
    /**
     * OK
     */
    200: RestApiResponsePostAdminViewDto;
};

export type GetPostByIdForAdminResponse = GetPostByIdForAdminResponses[keyof GetPostByIdForAdminResponses];

export type GetAllPostWithDetailsForAdminData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/posts/all/aggregate';
};

export type GetAllPostWithDetailsForAdminResponses = {
    /**
     * OK
     */
    200: RestApiResponseListPostAdminViewDto;
};

export type GetAllPostWithDetailsForAdminResponse = GetAllPostWithDetailsForAdminResponses[keyof GetAllPostWithDetailsForAdminResponses];

export type DeleteNotificationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/notifications/{id}';
};

export type DeleteNotificationResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteNotificationResponse = DeleteNotificationResponses[keyof DeleteNotificationResponses];

export type GetNotificationById1Data = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/notifications/{id}';
};

export type GetNotificationById1Responses = {
    /**
     * OK
     */
    200: RestApiResponseAdminNotificationDto;
};

export type GetNotificationById1Response = GetNotificationById1Responses[keyof GetNotificationById1Responses];

export type GetAllNotificationByRecipientIdData = {
    body?: never;
    path: {
        recipientId: string;
    };
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
        /**
         * Type of notification event
         */
        type?: 'LIKE_POST' | 'NEW_FOLLOWER' | 'UN_FOLLOWER' | 'COMMENT_POST' | 'LIKE_COMMENT' | 'MENTION_COMMENT' | 'REPLY_COMMENT' | 'REPORT_COMMENT' | 'REPORT_POST' | 'COMMENT_PINNED' | 'SYSTEM_MESSAGE';
        groupType?: string;
        isRead?: boolean;
        isDeleted?: boolean;
        includeRecipientUser?: boolean;
        createdAt?: Date;
        deletedAt?: Date;
    };
    url: '/api/admin/notification-client/recipient/{recipientId}';
};

export type GetAllNotificationByRecipientIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseListNotificationResponse;
};

export type GetAllNotificationByRecipientIdResponse = GetAllNotificationByRecipientIdResponses[keyof GetAllNotificationByRecipientIdResponses];

export type GetLogEntryByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/logs/{id}';
};

export type GetLogEntryByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseLogEntryDto;
};

export type GetLogEntryByIdResponse = GetLogEntryByIdResponses[keyof GetLogEntryByIdResponses];

export type GetAllCommentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/comments';
};

export type GetAllCommentsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListCommentRespond;
};

export type GetAllCommentsResponse = GetAllCommentsResponses[keyof GetAllCommentsResponses];

export type GetAllCommentsWithPostDetailsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/api/admin/comments/with-details';
};

export type GetAllCommentsWithPostDetailsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListCommentResponseWithPostDetails;
};

export type GetAllCommentsWithPostDetailsResponse = GetAllCommentsWithPostDetailsResponses[keyof GetAllCommentsWithPostDetailsResponses];

export type GetUserAnalyticsOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/users/overview';
};

export type GetUserAnalyticsOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetUserAnalyticsOverviewResponse = GetUserAnalyticsOverviewResponses[keyof GetUserAnalyticsOverviewResponses];

export type GetDailyUserCountsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/users/daily-counts';
};

export type GetDailyUserCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyUserCountsResponse = GetDailyUserCountsResponses[keyof GetDailyUserCountsResponses];

export type GetTagAnalyticsOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/tags/overview';
};

export type GetTagAnalyticsOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetTagAnalyticsOverviewResponse = GetTagAnalyticsOverviewResponses[keyof GetTagAnalyticsOverviewResponses];

export type GetTagDistributionData = {
    body?: never;
    path?: never;
    query: {
        days: number;
    };
    url: '/api/admin/analytics/tags/distribution';
};

export type GetTagDistributionResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTopTagUsageDto;
};

export type GetTagDistributionResponse = GetTagDistributionResponses[keyof GetTagDistributionResponses];

export type GetDailyTagCountsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/tags/daily-counts';
};

export type GetDailyTagCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyTagCountsResponse = GetDailyTagCountsResponses[keyof GetDailyTagCountsResponses];

export type GetPostAnalyticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/posts';
};

export type GetPostAnalyticsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetPostAnalyticsResponse = GetPostAnalyticsResponses[keyof GetPostAnalyticsResponses];

export type GetDailyPostCountData = {
    body?: never;
    path?: never;
    query: {
        days: number;
    };
    url: '/api/admin/analytics/posts/daily-post-count';
};

export type GetDailyPostCountResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyPostCountResponse = GetDailyPostCountResponses[keyof GetDailyPostCountResponses];

export type GetUsersPerDayData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/dashboard/users/daily';
};

export type GetUsersPerDayResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetUsersPerDayResponse = GetUsersPerDayResponses[keyof GetUsersPerDayResponses];

export type GetPostsPerDayData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/dashboard/posts/daily';
};

export type GetPostsPerDayResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetPostsPerDayResponse = GetPostsPerDayResponses[keyof GetPostsPerDayResponses];

export type GetDashboardOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/dashboard/overview';
};

export type GetDashboardOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetDashboardOverviewResponse = GetDashboardOverviewResponses[keyof GetDashboardOverviewResponses];

export type GetCommentsPerDayData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/dashboard/comments/daily';
};

export type GetCommentsPerDayResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetCommentsPerDayResponse = GetCommentsPerDayResponses[keyof GetCommentsPerDayResponses];

export type GetAllDashboardDataData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/dashboard/all';
};

export type GetAllDashboardDataResponses = {
    /**
     * OK
     */
    200: RestApiResponseMapStringObject;
};

export type GetAllDashboardDataResponse = GetAllDashboardDataResponses[keyof GetAllDashboardDataResponses];

export type GetCommentAnalyticsOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/comments/overview';
};

export type GetCommentAnalyticsOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetCommentAnalyticsOverviewResponse = GetCommentAnalyticsOverviewResponses[keyof GetCommentAnalyticsOverviewResponses];

export type GetDailyCommentCountsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/comments/daily-counts';
};

export type GetDailyCommentCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyCommentCountsResponse = GetDailyCommentCountsResponses[keyof GetDailyCommentCountsResponses];

export type GetCategoryAnalyticsOverviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/analytics/categories/overview';
};

export type GetCategoryAnalyticsOverviewResponses = {
    /**
     * OK
     */
    200: RestApiResponseListOverviewStatistic;
};

export type GetCategoryAnalyticsOverviewResponse = GetCategoryAnalyticsOverviewResponses[keyof GetCategoryAnalyticsOverviewResponses];

export type GetCategoryDistributionData = {
    body?: never;
    path?: never;
    query: {
        days: number;
    };
    url: '/api/admin/analytics/categories/distribution';
};

export type GetCategoryDistributionResponses = {
    /**
     * OK
     */
    200: RestApiResponseListTopCategoryUsageDto;
};

export type GetCategoryDistributionResponse = GetCategoryDistributionResponses[keyof GetCategoryDistributionResponses];

export type GetDailyCategoryCountsData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/api/admin/analytics/categories/daily-counts';
};

export type GetDailyCategoryCountsResponses = {
    /**
     * OK
     */
    200: RestApiResponseListDailyCountDto;
};

export type GetDailyCategoryCountsResponse = GetDailyCategoryCountsResponses[keyof GetDailyCategoryCountsResponses];

export type GetAllData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Zero-based page index (0..N)
         */
        page?: number;
        /**
         * The size of the page to be returned
         */
        size?: number;
        /**
         * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         */
        sort?: Array<string>;
    };
    url: '/admin/api/follows';
};

export type GetAllResponses = {
    /**
     * OK
     */
    200: RestApiResponseListFollowRespond;
};

export type GetAllResponse = GetAllResponses[keyof GetAllResponses];

export type BulkDeleteRolesData = {
    body: BulkRoleDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/users/roles/bulk-delete';
};

export type BulkDeleteRolesResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteRolesResponse = BulkDeleteRolesResponses[keyof BulkDeleteRolesResponses];

export type BulkDeletePermissionsData = {
    body: BulkPermissionDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/users/permissions/bulk-delete';
};

export type BulkDeletePermissionsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeletePermissionsResponse = BulkDeletePermissionsResponses[keyof BulkDeletePermissionsResponses];

export type DeleteAssetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/storage/delete/{id}';
};

export type DeleteAssetResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteAssetResponse = DeleteAssetResponses[keyof DeleteAssetResponses];

export type BulkDeleteReportsData = {
    body: BulkReportDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/reports/bulk-delete';
};

export type BulkDeleteReportsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteReportsResponse = BulkDeleteReportsResponses[keyof BulkDeleteReportsResponses];

export type DeleteInteractionData = {
    body?: never;
    path: {
        postId: string;
        interactionType: string;
    };
    query?: never;
    url: '/api/posts/{postId}/interactions/{interactionType}';
};

export type DeleteInteractionResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteInteractionResponse = DeleteInteractionResponses[keyof DeleteInteractionResponses];

export type RemoveTagFromPostData = {
    body?: never;
    path: {
        postId: string;
        tagId: string;
    };
    query?: never;
    url: '/api/posts/tags/post/{postId}/tag/{tagId}';
};

export type RemoveTagFromPostResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type RemoveTagFromPostResponse = RemoveTagFromPostResponses[keyof RemoveTagFromPostResponses];

export type BulkDeleteTagsData = {
    body: BulkTagDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/posts/tags/bulk-delete';
};

export type BulkDeleteTagsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteTagsResponse = BulkDeleteTagsResponses[keyof BulkDeleteTagsResponses];

export type DeletePostCategoriesData = {
    body: BulkPostCategoryDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/post-categories/bulk';
};

export type DeletePostCategoriesResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeletePostCategoriesResponse = DeletePostCategoriesResponses[keyof DeletePostCategoriesResponses];

export type SoftDeleteNotificationByIdData = {
    body?: never;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/notifications/{notificationId}/soft';
};

export type SoftDeleteNotificationByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type SoftDeleteNotificationByIdResponse = SoftDeleteNotificationByIdResponses[keyof SoftDeleteNotificationByIdResponses];

export type DismissAllNotificationsData = {
    body?: never;
    path?: never;
    query?: {
        type?: string;
    };
    url: '/api/notifications/dismiss-all';
};

export type DismissAllNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DismissAllNotificationsResponse = DismissAllNotificationsResponses[keyof DismissAllNotificationsResponses];

export type RemoveInteractionData = {
    body?: never;
    path: {
        commentId: string;
        interactionType: string;
    };
    query?: never;
    url: '/api/comments/{commentId}/interactions/{interactionType}';
};

export type RemoveInteractionResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type RemoveInteractionResponse = RemoveInteractionResponses[keyof RemoveInteractionResponses];

export type BulkDeleteUsersData = {
    body: BulkUserDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/admin/users/bulk';
};

export type BulkDeleteUsersResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteUsersResponse = BulkDeleteUsersResponses[keyof BulkDeleteUsersResponses];

export type DeleteAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/users/all';
};

export type DeleteAllUsersResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteAllUsersResponse = DeleteAllUsersResponses[keyof DeleteAllUsersResponses];

export type DeleteAllPostsByUserData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/api/admin/posts/user/{userId}';
};

export type DeleteAllPostsByUserResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteAllPostsByUserResponse = DeleteAllPostsByUserResponses[keyof DeleteAllPostsByUserResponses];

export type BulkDeleteNotificationsData = {
    body: BulkAdminNotificationDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/admin/notifications/bulk-delete';
};

export type BulkDeleteNotificationsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteNotificationsResponse = BulkDeleteNotificationsResponses[keyof BulkDeleteNotificationsResponses];

export type ForceDeleteNotificationByIdData = {
    body?: never;
    path: {
        notificationId: string;
    };
    query?: never;
    url: '/api/admin/notification-client/{notificationId}/force';
};

export type ForceDeleteNotificationByIdResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type ForceDeleteNotificationByIdResponse = ForceDeleteNotificationByIdResponses[keyof ForceDeleteNotificationByIdResponses];

export type BulkDeleteLogEntriesData = {
    body: BulkLogDeleteRequest;
    path?: never;
    query?: never;
    url: '/api/admin/logs/bulk-delete';
};

export type BulkDeleteLogEntriesResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type BulkDeleteLogEntriesResponse = BulkDeleteLogEntriesResponses[keyof BulkDeleteLogEntriesResponses];

export type DeleteMultipleCommentsData = {
    body?: never;
    path?: never;
    query: {
        commentIds: Array<string>;
    };
    url: '/api/admin/comments/bulk';
};

export type DeleteMultipleCommentsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteMultipleCommentsResponse = DeleteMultipleCommentsResponses[keyof DeleteMultipleCommentsResponses];

export type DeleteAllCommentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/comments/all';
};

export type DeleteAllCommentsResponses = {
    /**
     * OK
     */
    200: RestApiResponseVoid;
};

export type DeleteAllCommentsResponse = DeleteAllCommentsResponses[keyof DeleteAllCommentsResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8080' | (string & {});
};