// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { RestoreUserData, RestoreUserResponse, DeleteRoleData, DeleteRoleResponse, GetRoleByIdData, GetRoleByIdResponse, UpdateRoleData, UpdateRoleResponse, DeletePermissionData, DeletePermissionResponse, GetPermissionByIdData, GetPermissionByIdResponse, UpdatePermissionData, UpdatePermissionResponse, UpdateUserImageData, UpdateUserImageResponse, UpdateCurrentUserInfoData, UpdateCurrentUserInfoResponse, UpdateUserAccountData, UpdateUserAccountResponse, GetUserLoginStatusData, GetUserLoginStatusResponse, UpdateUserLoginStatusData, UpdateUserLoginStatusResponse, GetLoginStatusData, GetLoginStatusResponse, UpdateLoginStatusData, UpdateLoginStatusResponse, UpdateReportStatusData, UpdateReportStatusResponse, BulkUpdateReportsData, BulkUpdateReportsResponse, DeletePostData, DeletePostResponse, GetPostByIdData, GetPostByIdResponse, UpdatePostData, UpdatePostResponse, DeleteTagData, DeleteTagResponse, GetTagByIdData, GetTagByIdResponse, UpdateTagData, UpdateTagResponse, RemoveAllTagsFromPostData, RemoveAllTagsFromPostResponse, UpdatePostTagsData, UpdatePostTagsResponse, BulkUpdatePostsData, BulkUpdatePostsResponse, DeleteCommentData, DeleteCommentResponse, GetCommentByIdData, GetCommentByIdResponse, UpdateCommentData, UpdateCommentResponse, BulkUpdateCommentsData, BulkUpdateCommentsResponse, UpdateUserInfoData, UpdateUserInfoResponse, UpdateUserAccount1Data, UpdateUserAccount1Response, BulkUpdateUsersData, BulkUpdateUsersResponse, BulkDeletePostsData, BulkDeletePostsResponse, BulkUpdatePosts1Data, BulkUpdatePosts1Response, BulkUpdateNotificationsData, BulkUpdateNotificationsResponse, UpdateNotificationByIdData, UpdateNotificationByIdResponse, CreateUserData, CreateUserResponse, GetAllRolesData, GetAllRolesResponse, CreateRoleData, CreateRoleResponse, SyncPermissionsForRoleData, SyncPermissionsForRoleResponse, AssignPermissionsToRoleData, AssignPermissionsToRoleResponse, GetAllPermissionsData, GetAllPermissionsResponse, CreatePermissionData, CreatePermissionResponse, GenerateUploadSignatureData, GenerateUploadSignatureResponse, CreateAssetData, CreateAssetResponse, SearchReportsData, SearchReportsResponse, CreateReportData, CreateReportResponse, CreatePostData, CreatePostResponse, RecordViewData, RecordViewResponse, GetInteractionsByPostIdData, GetInteractionsByPostIdResponse, CreateInteractionData, CreateInteractionResponse, DeleteBookmarkData, DeleteBookmarkResponse, IsBookmarkedData, IsBookmarkedResponse, BookmarkPostData, BookmarkPostResponse, GetAllTagsData, GetAllTagsResponse, CreateTagData, CreateTagResponse, AddTagsToPostData, AddTagsToPostResponse, GetPostCategoriesData, GetPostCategoriesResponse, CreatePostCategoryData, CreatePostCategoryResponse, CleanupOldSoftDeletedNotificationsData, CleanupOldSoftDeletedNotificationsResponse, UnfollowData, UnfollowResponse, FollowData, FollowResponse, CreateCommentData, CreateCommentResponse, GetInteractionsData, GetInteractionsResponse, CreateInteraction1Data, CreateInteraction1Response, EnableMaintenanceData, EnableMaintenanceResponse, DisableMaintenanceData, DisableMaintenanceResponse, GetAllNotificationsData, GetAllNotificationsResponse, CreateNotificationData, CreateNotificationResponse, CreateAdminNotificationsData, CreateAdminNotificationsResponse, GetAllLogEntriesData, GetAllLogEntriesResponse, CreateLogEntryData, CreateLogEntryResponse, DeletePostCategoryData, DeletePostCategoryResponse, UpdatePostCategoryData, UpdatePostCategoryResponse, UnmarkNotificationAsReadData, UnmarkNotificationAsReadResponse, MarkNotificationAsReadData, MarkNotificationAsReadResponse, UnmarkAllNotificationsAsReadData, UnmarkAllNotificationsAsReadResponse, MarkAllNotificationsAsReadData, MarkAllNotificationsAsReadResponse, UnpinCommentData, UnpinCommentResponse, PinCommentData, PinCommentResponse, MarkAsUnreadData, MarkAsUnreadResponse, MarkAsReadData, MarkAsReadResponse, IsUserExistsData, IsUserExistsResponse, GetUserSummaryData, GetUserSummaryResponse, GetUserIntroductionData, GetUserIntroductionResponse, GetRoleBySlugData, GetRoleBySlugResponse, GetPermissionBySlugData, GetPermissionBySlugResponse, DeleteCurrentUserData, DeleteCurrentUserResponse, GetCurrentUserData, GetCurrentUserResponse, IsUserExistsByAuth0IdData, IsUserExistsByAuth0IdResponse, GetVideoThumbnailUrlData, GetVideoThumbnailUrlResponse, GetVideoPlaybackUrlData, GetVideoPlaybackUrlResponse, GetAssetByIdData, GetAssetByIdResponse, GetAssetByPublicIdData, GetAssetByPublicIdResponse, DeleteReportData, DeleteReportResponse, GetReportByIdData, GetReportByIdResponse, GetAllReportsData, GetAllReportsResponse, GetTotalViewsData, GetTotalViewsResponse, HasMeInteractedData, HasMeInteractedResponse, GetTotalViewsByUserIdData, GetTotalViewsByUserIdResponse, GetCountAllPostsByUserIdData, GetCountAllPostsByUserIdResponse, GetAllPublicPostsByUserIdData, GetAllPublicPostsByUserIdResponse, GetTagsWithCountsData, GetTagsWithCountsResponse, GetTagWithCountByIdData, GetTagWithCountByIdResponse, GetTagWithCountBySlugData, GetTagWithCountBySlugResponse, GetTagWithCountByNameData, GetTagWithCountByNameResponse, GetTagNamesByPostIdData, GetTagNamesByPostIdResponse, GetTagsByPostIdData, GetTagsByPostIdResponse, GetAllTagsWithCountsData, GetAllTagsWithCountsResponse, GetAllPublicPostsData, GetAllPublicPostsResponse, GetMeAllPostsData, GetMeAllPostsResponse, GetPostCategoryByNameData, GetPostCategoryByNameResponse, GetCategoriesWithCountsData, GetCategoriesWithCountsResponse, GetCategoryWithCountByNameData, GetCategoryWithCountByNameResponse, GetCategoryWithCountByIdData, GetCategoryWithCountByIdResponse, GetPostCategoryByIdData, GetPostCategoryByIdResponse, GetAllCategoriesWithCountsData, GetAllCategoriesWithCountsResponse, GetNotificationByIdData, GetNotificationByIdResponse, GetNotificationStatisticsData, GetNotificationStatisticsResponse, GetMyNotificationsData, GetMyNotificationsResponse, GetHistoriesByUserIdData, GetHistoriesByUserIdResponse, GetHistoriesForMeData, GetHistoriesForMeResponse, GetOverviewData, GetOverviewResponse, GetFollowingByUserIdData, GetFollowingByUserIdResponse, GetFollowersByUserIdData, GetFollowersByUserIdResponse, GetMyFollowingData, GetMyFollowingResponse, GetMyFollowersData, GetMyFollowersResponse, IsFriendData, IsFriendResponse, GetFeedData, GetFeedResponse, GetFeedByUserIdData, GetFeedByUserIdResponse, GetFeed1Data, GetFeed1Response, GetAllCommentsByPostIdData, GetAllCommentsByPostIdResponse, GetModerationOverviewData, GetModerationOverviewResponse, GetUserModerationOverviewData, GetUserModerationOverviewResponse, GetPostModerationOverviewData, GetPostModerationOverviewResponse, GetCommentModerationOverviewData, GetCommentModerationOverviewResponse, GetDailyPendingAndResolvedReportsData, GetDailyPendingAndResolvedReportsResponse, GetLogOverviewData, GetLogOverviewResponse, GetDailyErrorLogsData, GetDailyErrorLogsResponse, GetDailyLogsBySeverityData, GetDailyLogsBySeverityResponse, GetNotificationTrendsData, GetNotificationTrendsResponse, GetAdminNotificationOverviewData, GetAdminNotificationOverviewResponse, GetNotificationsByTypeData, GetNotificationsByTypeResponse, GetNotificationsBySeverityData, GetNotificationsBySeverityResponse, GetAllUsersData, GetAllUsersResponse, DeleteUserData, DeleteUserResponse, GetUserData, GetUserResponse, GetAllUserIntroductionsData, GetAllUserIntroductionsResponse, GetSystemStatusData, GetSystemStatusResponse, GetStatusMaintenanceData, GetStatusMaintenanceResponse, GetDatabaseSchemaData, GetDatabaseSchemaResponse, GetAllPostsForAdminData, GetAllPostsForAdminResponse, DeletePost1Data, DeletePost1Response, GetPostByIdForAdminData, GetPostByIdForAdminResponse, GetAllPostWithDetailsForAdminData, GetAllPostWithDetailsForAdminResponse, DeleteNotificationData, DeleteNotificationResponse, GetNotificationById1Data, GetNotificationById1Response, GetAllNotificationByRecipientIdData, GetAllNotificationByRecipientIdResponse, GetLogEntryByIdData, GetLogEntryByIdResponse, GetAllCommentsData, GetAllCommentsResponse, GetAllCommentsWithPostDetailsData, GetAllCommentsWithPostDetailsResponse, GetUserAnalyticsOverviewData, GetUserAnalyticsOverviewResponse, GetDailyUserCountsData, GetDailyUserCountsResponse, GetTagAnalyticsOverviewData, GetTagAnalyticsOverviewResponse, GetTagDistributionData, GetTagDistributionResponse, GetDailyTagCountsData, GetDailyTagCountsResponse, GetPostAnalyticsData, GetPostAnalyticsResponse, GetDailyPostCountData, GetDailyPostCountResponse, GetUsersPerDayData, GetUsersPerDayResponse, GetPostsPerDayData, GetPostsPerDayResponse, GetDashboardOverviewData, GetDashboardOverviewResponse, GetCommentsPerDayData, GetCommentsPerDayResponse, GetAllDashboardDataData, GetAllDashboardDataResponse, GetCommentAnalyticsOverviewData, GetCommentAnalyticsOverviewResponse, GetDailyCommentCountsData, GetDailyCommentCountsResponse, GetCategoryAnalyticsOverviewData, GetCategoryAnalyticsOverviewResponse, GetCategoryDistributionData, GetCategoryDistributionResponse, GetDailyCategoryCountsData, GetDailyCategoryCountsResponse, GetAllData, GetAllResponse, BulkDeleteRolesData, BulkDeleteRolesResponse, BulkDeletePermissionsData, BulkDeletePermissionsResponse, DeleteAssetData, DeleteAssetResponse, BulkDeleteReportsData, BulkDeleteReportsResponse, DeleteInteractionData, DeleteInteractionResponse, RemoveTagFromPostData, RemoveTagFromPostResponse, BulkDeleteTagsData, BulkDeleteTagsResponse, DeletePostCategoriesData, DeletePostCategoriesResponse, SoftDeleteNotificationByIdData, SoftDeleteNotificationByIdResponse, DismissAllNotificationsData, DismissAllNotificationsResponse, RemoveInteractionData, RemoveInteractionResponse, BulkDeleteUsersData, BulkDeleteUsersResponse, DeleteAllUsersData, DeleteAllUsersResponse, DeleteAllPostsByUserData, DeleteAllPostsByUserResponse, BulkDeleteNotificationsData, BulkDeleteNotificationsResponse, ForceDeleteNotificationByIdData, ForceDeleteNotificationByIdResponse, BulkDeleteLogEntriesData, BulkDeleteLogEntriesResponse, DeleteMultipleCommentsData, DeleteMultipleCommentsResponse, DeleteAllCommentsData, DeleteAllCommentsResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const restoreUser = <ThrowOnError extends boolean = false>(options: Options<RestoreUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RestoreUserResponse, unknown, ThrowOnError>({
        url: '/api/users/{id}/restore',
        ...options
    });
};

export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/{id}',
        ...options
    });
};

export const getRoleById = <ThrowOnError extends boolean = false>(options: Options<GetRoleByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleByIdResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/{id}',
        ...options
    });
};

export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRoleResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePermission = <ThrowOnError extends boolean = false>(options: Options<DeletePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePermissionResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions/{id}',
        ...options
    });
};

export const getPermissionById = <ThrowOnError extends boolean = false>(options: Options<GetPermissionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPermissionByIdResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions/{id}',
        ...options
    });
};

export const updatePermission = <ThrowOnError extends boolean = false>(options: Options<UpdatePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePermissionResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateUserImage = <ThrowOnError extends boolean = false>(options: Options<UpdateUserImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserImageResponse, unknown, ThrowOnError>({
        url: '/api/users/me/update-image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateCurrentUserInfo = <ThrowOnError extends boolean = false>(options: Options<UpdateCurrentUserInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCurrentUserInfoResponse, unknown, ThrowOnError>({
        url: '/api/users/me/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateUserAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateUserAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserAccountResponse, unknown, ThrowOnError>({
        url: '/api/users/me/account',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserLoginStatus = <ThrowOnError extends boolean = false>(options: Options<GetUserLoginStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserLoginStatusResponse, unknown, ThrowOnError>({
        url: '/api/users/login/{userId}/status',
        ...options
    });
};

export const updateUserLoginStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateUserLoginStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserLoginStatusResponse, unknown, ThrowOnError>({
        url: '/api/users/login/{userId}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getLoginStatus = <ThrowOnError extends boolean = false>(options?: Options<GetLoginStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginStatusResponse, unknown, ThrowOnError>({
        url: '/api/users/login/status',
        ...options
    });
};

export const updateLoginStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateLoginStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLoginStatusResponse, unknown, ThrowOnError>({
        url: '/api/users/login/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateReportStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateReportStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateReportStatusResponse, unknown, ThrowOnError>({
        url: '/api/reports/{reportId}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdateReports = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdateReportsResponse, unknown, ThrowOnError>({
        url: '/api/reports/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePost = <ThrowOnError extends boolean = false>(options: Options<DeletePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}',
        ...options
    });
};

export const getPostById = <ThrowOnError extends boolean = false>(options: Options<GetPostByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostByIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}',
        ...options
    });
};

export const updatePost = <ThrowOnError extends boolean = false>(options: Options<UpdatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePostResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/{tagId}',
        ...options
    });
};

export const getTagById = <ThrowOnError extends boolean = false>(options: Options<GetTagByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagByIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/{tagId}',
        ...options
    });
};

export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTagResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/{tagId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const removeAllTagsFromPost = <ThrowOnError extends boolean = false>(options: Options<RemoveAllTagsFromPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveAllTagsFromPostResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/post/{postId}',
        ...options
    });
};

export const updatePostTags = <ThrowOnError extends boolean = false>(options: Options<UpdatePostTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePostTagsResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/post/{postId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdatePosts = <ThrowOnError extends boolean = false>(options: Options<BulkUpdatePostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdatePostsResponse, unknown, ThrowOnError>({
        url: '/api/posts/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteComment = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommentResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}',
        ...options
    });
};

export const getCommentById = <ThrowOnError extends boolean = false>(options: Options<GetCommentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentByIdResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}',
        ...options
    });
};

export const updateComment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCommentResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdateComments = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdateCommentsResponse, unknown, ThrowOnError>({
        url: '/api/comments/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateUserInfo = <ThrowOnError extends boolean = false>(options: Options<UpdateUserInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserInfoResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/{id}/info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateUserAccount1 = <ThrowOnError extends boolean = false>(options: Options<UpdateUserAccount1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserAccount1Response, unknown, ThrowOnError>({
        url: '/api/admin/users/{id}/account',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdateUsers = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdateUsersResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkDeletePosts = <ThrowOnError extends boolean = false>(options: Options<BulkDeletePostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeletePostsResponse, unknown, ThrowOnError>({
        url: '/api/admin/posts/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdatePosts1 = <ThrowOnError extends boolean = false>(options: Options<BulkUpdatePosts1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdatePosts1Response, unknown, ThrowOnError>({
        url: '/api/admin/posts/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkUpdateNotifications = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdateNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateNotificationById = <ThrowOnError extends boolean = false>(options: Options<UpdateNotificationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateNotificationByIdResponse, unknown, ThrowOnError>({
        url: '/api/admin/notification-client/{notificationId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, unknown, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllRoles = <ThrowOnError extends boolean = false>(options?: Options<GetAllRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllRolesResponse, unknown, ThrowOnError>({
        url: '/api/users/roles',
        ...options
    });
};

export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponse, unknown, ThrowOnError>({
        url: '/api/users/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const syncPermissionsForRole = <ThrowOnError extends boolean = false>(options: Options<SyncPermissionsForRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPermissionsForRoleResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/{roleId}/permissions/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const assignPermissionsToRole = <ThrowOnError extends boolean = false>(options: Options<AssignPermissionsToRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignPermissionsToRoleResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/permissions/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllPermissions = <ThrowOnError extends boolean = false>(options?: Options<GetAllPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPermissionsResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions',
        ...options
    });
};

export const createPermission = <ThrowOnError extends boolean = false>(options: Options<CreatePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePermissionResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const generateUploadSignature = <ThrowOnError extends boolean = false>(options: Options<GenerateUploadSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateUploadSignatureResponse, unknown, ThrowOnError>({
        url: '/api/storage/signature',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createAsset = <ThrowOnError extends boolean = false>(options: Options<CreateAssetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssetResponse, unknown, ThrowOnError>({
        url: '/api/storage/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const searchReports = <ThrowOnError extends boolean = false>(options?: Options<SearchReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchReportsResponse, unknown, ThrowOnError>({
        url: '/api/reports',
        ...options
    });
};

export const createReport = <ThrowOnError extends boolean = false>(options: Options<CreateReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReportResponse, unknown, ThrowOnError>({
        url: '/api/reports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createPost = <ThrowOnError extends boolean = false>(options: Options<CreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePostResponse, unknown, ThrowOnError>({
        url: '/api/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const recordView = <ThrowOnError extends boolean = false>(options: Options<RecordViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RecordViewResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/view',
        ...options
    });
};

export const getInteractionsByPostId = <ThrowOnError extends boolean = false>(options: Options<GetInteractionsByPostIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInteractionsByPostIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/interactions',
        ...options
    });
};

export const createInteraction = <ThrowOnError extends boolean = false>(options: Options<CreateInteractionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInteractionResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/interactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteBookmark = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBookmarkResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/bookmarks',
        ...options
    });
};

export const isBookmarked = <ThrowOnError extends boolean = false>(options: Options<IsBookmarkedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IsBookmarkedResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/bookmarks',
        ...options
    });
};

export const bookmarkPost = <ThrowOnError extends boolean = false>(options: Options<BookmarkPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BookmarkPostResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/bookmarks',
        ...options
    });
};

export const getAllTags = <ThrowOnError extends boolean = false>(options?: Options<GetAllTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTagsResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags',
        ...options
    });
};

export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const addTagsToPost = <ThrowOnError extends boolean = false>(options: Options<AddTagsToPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTagsToPostResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/post/{postId}/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPostCategories = <ThrowOnError extends boolean = false>(options?: Options<GetPostCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostCategoriesResponse, unknown, ThrowOnError>({
        url: '/api/post-categories',
        ...options
    });
};

export const createPostCategory = <ThrowOnError extends boolean = false>(options: Options<CreatePostCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePostCategoryResponse, unknown, ThrowOnError>({
        url: '/api/post-categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const cleanupOldSoftDeletedNotifications = <ThrowOnError extends boolean = false>(options?: Options<CleanupOldSoftDeletedNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanupOldSoftDeletedNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/notifications/cleanup',
        ...options
    });
};

export const unfollow = <ThrowOnError extends boolean = false>(options: Options<UnfollowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnfollowResponse, unknown, ThrowOnError>({
        url: '/api/follows/{followingId}',
        ...options
    });
};

export const follow = <ThrowOnError extends boolean = false>(options: Options<FollowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FollowResponse, unknown, ThrowOnError>({
        url: '/api/follows/{followingId}',
        ...options
    });
};

export const createComment = <ThrowOnError extends boolean = false>(options: Options<CreateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCommentResponse, unknown, ThrowOnError>({
        url: '/api/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getInteractions = <ThrowOnError extends boolean = false>(options: Options<GetInteractionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInteractionsResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}/interactions',
        ...options
    });
};

export const createInteraction1 = <ThrowOnError extends boolean = false>(options: Options<CreateInteraction1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInteraction1Response, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}/interactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const enableMaintenance = <ThrowOnError extends boolean = false>(options?: Options<EnableMaintenanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EnableMaintenanceResponse, unknown, ThrowOnError>({
        url: '/api/admin/system/maintenance/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const disableMaintenance = <ThrowOnError extends boolean = false>(options?: Options<DisableMaintenanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DisableMaintenanceResponse, unknown, ThrowOnError>({
        url: '/api/admin/system/maintenance/disable',
        ...options
    });
};

export const getAllNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetAllNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications',
        ...options
    });
};

export const createNotification = <ThrowOnError extends boolean = false>(options: Options<CreateNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNotificationResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createAdminNotifications = <ThrowOnError extends boolean = false>(options: Options<CreateAdminNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAdminNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/admin/notification-client/admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllLogEntries = <ThrowOnError extends boolean = false>(options?: Options<GetAllLogEntriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllLogEntriesResponse, unknown, ThrowOnError>({
        url: '/api/admin/logs',
        ...options
    });
};

export const createLogEntry = <ThrowOnError extends boolean = false>(options: Options<CreateLogEntryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLogEntryResponse, unknown, ThrowOnError>({
        url: '/api/admin/logs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePostCategory = <ThrowOnError extends boolean = false>(options: Options<DeletePostCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostCategoryResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/{postCategoryId}',
        ...options
    });
};

export const updatePostCategory = <ThrowOnError extends boolean = false>(options: Options<UpdatePostCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdatePostCategoryResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/{postCategoryId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const unmarkNotificationAsRead = <ThrowOnError extends boolean = false>(options: Options<UnmarkNotificationAsReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UnmarkNotificationAsReadResponse, unknown, ThrowOnError>({
        url: '/api/notifications/{notificationId}/unmark-as-read',
        ...options
    });
};

export const markNotificationAsRead = <ThrowOnError extends boolean = false>(options: Options<MarkNotificationAsReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarkNotificationAsReadResponse, unknown, ThrowOnError>({
        url: '/api/notifications/{notificationId}/mark-as-read',
        ...options
    });
};

export const unmarkAllNotificationsAsRead = <ThrowOnError extends boolean = false>(options?: Options<UnmarkAllNotificationsAsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UnmarkAllNotificationsAsReadResponse, unknown, ThrowOnError>({
        url: '/api/notifications/unmark-all-as-read',
        ...options
    });
};

export const markAllNotificationsAsRead = <ThrowOnError extends boolean = false>(options?: Options<MarkAllNotificationsAsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<MarkAllNotificationsAsReadResponse, unknown, ThrowOnError>({
        url: '/api/notifications/mark-all-as-read',
        ...options
    });
};

export const unpinComment = <ThrowOnError extends boolean = false>(options: Options<UnpinCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UnpinCommentResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}/unpin',
        ...options
    });
};

export const pinComment = <ThrowOnError extends boolean = false>(options: Options<PinCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PinCommentResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}/pin',
        ...options
    });
};

export const markAsUnread = <ThrowOnError extends boolean = false>(options: Options<MarkAsUnreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarkAsUnreadResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications/{id}/unread',
        ...options
    });
};

export const markAsRead = <ThrowOnError extends boolean = false>(options: Options<MarkAsReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarkAsReadResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications/{id}/read',
        ...options
    });
};

export const isUserExists = <ThrowOnError extends boolean = false>(options: Options<IsUserExistsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IsUserExistsResponse, unknown, ThrowOnError>({
        url: '/api/users/{userId}/exists',
        ...options
    });
};

export const getUserSummary = <ThrowOnError extends boolean = false>(options: Options<GetUserSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSummaryResponse, unknown, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

export const getUserIntroduction = <ThrowOnError extends boolean = false>(options: Options<GetUserIntroductionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserIntroductionResponse, unknown, ThrowOnError>({
        url: '/api/users/{id}/intro',
        ...options
    });
};

export const getRoleBySlug = <ThrowOnError extends boolean = false>(options: Options<GetRoleBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleBySlugResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/slug/{slug}',
        ...options
    });
};

export const getPermissionBySlug = <ThrowOnError extends boolean = false>(options: Options<GetPermissionBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPermissionBySlugResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions/slug/{slug}',
        ...options
    });
};

export const deleteCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteCurrentUserResponse, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};

export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponse, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};

export const isUserExistsByAuth0Id = <ThrowOnError extends boolean = false>(options: Options<IsUserExistsByAuth0IdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IsUserExistsByAuth0IdResponse, unknown, ThrowOnError>({
        url: '/api/users/auth0/{auth0Id}/exists',
        ...options
    });
};

export const getVideoThumbnailUrl = <ThrowOnError extends boolean = false>(options: Options<GetVideoThumbnailUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoThumbnailUrlResponse, unknown, ThrowOnError>({
        url: '/api/storage/thumbnail-url/{publicId}',
        ...options
    });
};

export const getVideoPlaybackUrl = <ThrowOnError extends boolean = false>(options: Options<GetVideoPlaybackUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoPlaybackUrlResponse, unknown, ThrowOnError>({
        url: '/api/storage/playback-url/{publicId}',
        ...options
    });
};

export const getAssetById = <ThrowOnError extends boolean = false>(options: Options<GetAssetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetByIdResponse, unknown, ThrowOnError>({
        url: '/api/storage/asset/{id}',
        ...options
    });
};

export const getAssetByPublicId = <ThrowOnError extends boolean = false>(options: Options<GetAssetByPublicIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssetByPublicIdResponse, unknown, ThrowOnError>({
        url: '/api/storage/asset/public/{publicId}',
        ...options
    });
};

export const deleteReport = <ThrowOnError extends boolean = false>(options: Options<DeleteReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteReportResponse, unknown, ThrowOnError>({
        url: '/api/reports/{reportId}',
        ...options
    });
};

export const getReportById = <ThrowOnError extends boolean = false>(options: Options<GetReportByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReportByIdResponse, unknown, ThrowOnError>({
        url: '/api/reports/{reportId}',
        ...options
    });
};

export const getAllReports = <ThrowOnError extends boolean = false>(options?: Options<GetAllReportsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllReportsResponse, unknown, ThrowOnError>({
        url: '/api/reports/all',
        ...options
    });
};

export const getTotalViews = <ThrowOnError extends boolean = false>(options: Options<GetTotalViewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTotalViewsResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/views',
        ...options
    });
};

export const hasMeInteracted = <ThrowOnError extends boolean = false>(options: Options<HasMeInteractedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HasMeInteractedResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/interactions/{interactionType}/me-is-interacted',
        ...options
    });
};

export const getTotalViewsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetTotalViewsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTotalViewsByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/users/{userId}/total-views',
        ...options
    });
};

export const getCountAllPostsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetCountAllPostsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCountAllPostsByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/users/{userId}/total-posts',
        ...options
    });
};

export const getAllPublicPostsByUserId = <ThrowOnError extends boolean = false>(options: Options<GetAllPublicPostsByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPublicPostsByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/users/{userId}/public',
        ...options
    });
};

export const getTagsWithCounts = <ThrowOnError extends boolean = false>(options?: Options<GetTagsWithCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagsWithCountsResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/with-counts',
        ...options
    });
};

export const getTagWithCountById = <ThrowOnError extends boolean = false>(options: Options<GetTagWithCountByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagWithCountByIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/with-counts/{tagId}',
        ...options
    });
};

export const getTagWithCountBySlug = <ThrowOnError extends boolean = false>(options: Options<GetTagWithCountBySlugData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagWithCountBySlugResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/with-counts/slug/{slug}',
        ...options
    });
};

export const getTagWithCountByName = <ThrowOnError extends boolean = false>(options: Options<GetTagWithCountByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagWithCountByNameResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/with-counts/name/{name}',
        ...options
    });
};

export const getTagNamesByPostId = <ThrowOnError extends boolean = false>(options: Options<GetTagNamesByPostIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagNamesByPostIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/names/by-post/{postId}',
        ...options
    });
};

export const getTagsByPostId = <ThrowOnError extends boolean = false>(options: Options<GetTagsByPostIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagsByPostIdResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/by-post/{postId}',
        ...options
    });
};

export const getAllTagsWithCounts = <ThrowOnError extends boolean = false>(options?: Options<GetAllTagsWithCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTagsWithCountsResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/all-with-counts',
        ...options
    });
};

export const getAllPublicPosts = <ThrowOnError extends boolean = false>(options?: Options<GetAllPublicPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPublicPostsResponse, unknown, ThrowOnError>({
        url: '/api/posts/public',
        ...options
    });
};

export const getMeAllPosts = <ThrowOnError extends boolean = false>(options?: Options<GetMeAllPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeAllPostsResponse, unknown, ThrowOnError>({
        url: '/api/posts/me',
        ...options
    });
};

export const getPostCategoryByName = <ThrowOnError extends boolean = false>(options: Options<GetPostCategoryByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostCategoryByNameResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/{postCategoryName}',
        ...options
    });
};

export const getCategoriesWithCounts = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesWithCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesWithCountsResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/with-counts',
        ...options
    });
};

export const getCategoryWithCountByName = <ThrowOnError extends boolean = false>(options: Options<GetCategoryWithCountByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryWithCountByNameResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/with-counts/{postCategoryName}',
        ...options
    });
};

export const getCategoryWithCountById = <ThrowOnError extends boolean = false>(options: Options<GetCategoryWithCountByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryWithCountByIdResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/with-counts/id/{postCategoryId}',
        ...options
    });
};

export const getPostCategoryById = <ThrowOnError extends boolean = false>(options: Options<GetPostCategoryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostCategoryByIdResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/id/{postCategoryId}',
        ...options
    });
};

export const getAllCategoriesWithCounts = <ThrowOnError extends boolean = false>(options?: Options<GetAllCategoriesWithCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCategoriesWithCountsResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/all-with-counts',
        ...options
    });
};

export const getNotificationById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationByIdResponse, unknown, ThrowOnError>({
        url: '/api/notifications/{notificationId}',
        ...options
    });
};

export const getNotificationStatistics = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationStatisticsResponse, unknown, ThrowOnError>({
        url: '/api/notifications/statistics',
        ...options
    });
};

export const getMyNotifications = <ThrowOnError extends boolean = false>(options?: Options<GetMyNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/notifications/my',
        ...options
    });
};

export const getHistoriesByUserId = <ThrowOnError extends boolean = false>(options: Options<GetHistoriesByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHistoriesByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/histories/users/{userId}',
        ...options
    });
};

export const getHistoriesForMe = <ThrowOnError extends boolean = false>(options?: Options<GetHistoriesForMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHistoriesForMeResponse, unknown, ThrowOnError>({
        url: '/api/histories/me',
        ...options
    });
};

export const getOverview = <ThrowOnError extends boolean = false>(options: Options<GetOverviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOverviewResponse, unknown, ThrowOnError>({
        url: '/api/follows/{userId}/overview',
        ...options
    });
};

export const getFollowingByUserId = <ThrowOnError extends boolean = false>(options: Options<GetFollowingByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFollowingByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/follows/{userId}/following',
        ...options
    });
};

export const getFollowersByUserId = <ThrowOnError extends boolean = false>(options: Options<GetFollowersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFollowersByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/follows/{userId}/followers',
        ...options
    });
};

export const getMyFollowing = <ThrowOnError extends boolean = false>(options?: Options<GetMyFollowingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyFollowingResponse, unknown, ThrowOnError>({
        url: '/api/follows/me/following',
        ...options
    });
};

export const getMyFollowers = <ThrowOnError extends boolean = false>(options?: Options<GetMyFollowersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyFollowersResponse, unknown, ThrowOnError>({
        url: '/api/follows/me/followers',
        ...options
    });
};

export const isFriend = <ThrowOnError extends boolean = false>(options: Options<IsFriendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IsFriendResponse, unknown, ThrowOnError>({
        url: '/api/follows/friend-check/{followerId}/{followingId}',
        ...options
    });
};

export const getFeed = <ThrowOnError extends boolean = false>(options?: Options<GetFeedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFeedResponse, unknown, ThrowOnError>({
        url: '/api/feeds',
        ...options
    });
};

export const getFeedByUserId = <ThrowOnError extends boolean = false>(options: Options<GetFeedByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeedByUserIdResponse, unknown, ThrowOnError>({
        url: '/api/feeds/users/{userId}',
        ...options
    });
};

export const getFeed1 = <ThrowOnError extends boolean = false>(options: Options<GetFeed1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeed1Response, unknown, ThrowOnError>({
        url: '/api/feeds/posts/{postId}',
        ...options
    });
};

export const getAllCommentsByPostId = <ThrowOnError extends boolean = false>(options: Options<GetAllCommentsByPostIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllCommentsByPostIdResponse, unknown, ThrowOnError>({
        url: '/api/comments/posts/{postId}',
        ...options
    });
};

export const getModerationOverview = <ThrowOnError extends boolean = false>(options?: Options<GetModerationOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetModerationOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/moderation/overview',
        ...options
    });
};

export const getUserModerationOverview = <ThrowOnError extends boolean = false>(options?: Options<GetUserModerationOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserModerationOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/moderation/overview/user',
        ...options
    });
};

export const getPostModerationOverview = <ThrowOnError extends boolean = false>(options?: Options<GetPostModerationOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostModerationOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/moderation/overview/post',
        ...options
    });
};

export const getCommentModerationOverview = <ThrowOnError extends boolean = false>(options?: Options<GetCommentModerationOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommentModerationOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/moderation/overview/comment',
        ...options
    });
};

export const getDailyPendingAndResolvedReports = <ThrowOnError extends boolean = false>(options: Options<GetDailyPendingAndResolvedReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailyPendingAndResolvedReportsResponse, unknown, ThrowOnError>({
        url: '/api/analytics/moderation/daily-pending-resolved',
        ...options
    });
};

export const getLogOverview = <ThrowOnError extends boolean = false>(options?: Options<GetLogOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/logs/overview',
        ...options
    });
};

export const getDailyErrorLogs = <ThrowOnError extends boolean = false>(options?: Options<GetDailyErrorLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyErrorLogsResponse, unknown, ThrowOnError>({
        url: '/api/analytics/logs/daily-errors',
        ...options
    });
};

export const getDailyLogsBySeverity = <ThrowOnError extends boolean = false>(options?: Options<GetDailyLogsBySeverityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyLogsBySeverityResponse, unknown, ThrowOnError>({
        url: '/api/analytics/logs/daily-by-severity',
        ...options
    });
};

export const getNotificationTrends = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationTrendsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationTrendsResponse, unknown, ThrowOnError>({
        url: '/api/analytics/admin-notifications/trends',
        ...options
    });
};

export const getAdminNotificationOverview = <ThrowOnError extends boolean = false>(options?: Options<GetAdminNotificationOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdminNotificationOverviewResponse, unknown, ThrowOnError>({
        url: '/api/analytics/admin-notifications/overview',
        ...options
    });
};

export const getNotificationsByType = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsByTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsByTypeResponse, unknown, ThrowOnError>({
        url: '/api/analytics/admin-notifications/by-type',
        ...options
    });
};

export const getNotificationsBySeverity = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsBySeverityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNotificationsBySeverityResponse, unknown, ThrowOnError>({
        url: '/api/analytics/admin-notifications/by-severity',
        ...options
    });
};

export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponse, unknown, ThrowOnError>({
        url: '/api/admin/users',
        ...options
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/{id}',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/{id}',
        ...options
    });
};

export const getAllUserIntroductions = <ThrowOnError extends boolean = false>(options?: Options<GetAllUserIntroductionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUserIntroductionsResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/intro/all',
        ...options
    });
};

export const getSystemStatus = <ThrowOnError extends boolean = false>(options?: Options<GetSystemStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemStatusResponse, unknown, ThrowOnError>({
        url: '/api/admin/system/status',
        ...options
    });
};

export const getStatusMaintenance = <ThrowOnError extends boolean = false>(options?: Options<GetStatusMaintenanceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStatusMaintenanceResponse, unknown, ThrowOnError>({
        url: '/api/admin/system/maintenance',
        ...options
    });
};

export const getDatabaseSchema = <ThrowOnError extends boolean = false>(options?: Options<GetDatabaseSchemaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDatabaseSchemaResponse, unknown, ThrowOnError>({
        url: '/api/admin/system/database-schema',
        ...options
    });
};

export const getAllPostsForAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetAllPostsForAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPostsForAdminResponse, unknown, ThrowOnError>({
        url: '/api/admin/posts',
        ...options
    });
};

export const deletePost1 = <ThrowOnError extends boolean = false>(options: Options<DeletePost1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePost1Response, unknown, ThrowOnError>({
        url: '/api/admin/posts/{postId}',
        ...options
    });
};

export const getPostByIdForAdmin = <ThrowOnError extends boolean = false>(options: Options<GetPostByIdForAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPostByIdForAdminResponse, unknown, ThrowOnError>({
        url: '/api/admin/posts/{postId}',
        ...options
    });
};

export const getAllPostWithDetailsForAdmin = <ThrowOnError extends boolean = false>(options?: Options<GetAllPostWithDetailsForAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPostWithDetailsForAdminResponse, unknown, ThrowOnError>({
        url: '/api/admin/posts/all/aggregate',
        ...options
    });
};

export const deleteNotification = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNotificationResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications/{id}',
        ...options
    });
};

export const getNotificationById1 = <ThrowOnError extends boolean = false>(options: Options<GetNotificationById1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNotificationById1Response, unknown, ThrowOnError>({
        url: '/api/admin/notifications/{id}',
        ...options
    });
};

export const getAllNotificationByRecipientId = <ThrowOnError extends boolean = false>(options: Options<GetAllNotificationByRecipientIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllNotificationByRecipientIdResponse, unknown, ThrowOnError>({
        url: '/api/admin/notification-client/recipient/{recipientId}',
        ...options
    });
};

export const getLogEntryById = <ThrowOnError extends boolean = false>(options: Options<GetLogEntryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLogEntryByIdResponse, unknown, ThrowOnError>({
        url: '/api/admin/logs/{id}',
        ...options
    });
};

export const getAllComments = <ThrowOnError extends boolean = false>(options?: Options<GetAllCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCommentsResponse, unknown, ThrowOnError>({
        url: '/api/admin/comments',
        ...options
    });
};

export const getAllCommentsWithPostDetails = <ThrowOnError extends boolean = false>(options?: Options<GetAllCommentsWithPostDetailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCommentsWithPostDetailsResponse, unknown, ThrowOnError>({
        url: '/api/admin/comments/with-details',
        ...options
    });
};

export const getUserAnalyticsOverview = <ThrowOnError extends boolean = false>(options?: Options<GetUserAnalyticsOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserAnalyticsOverviewResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/users/overview',
        ...options
    });
};

export const getDailyUserCounts = <ThrowOnError extends boolean = false>(options?: Options<GetDailyUserCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyUserCountsResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/users/daily-counts',
        ...options
    });
};

export const getTagAnalyticsOverview = <ThrowOnError extends boolean = false>(options?: Options<GetTagAnalyticsOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagAnalyticsOverviewResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/tags/overview',
        ...options
    });
};

export const getTagDistribution = <ThrowOnError extends boolean = false>(options: Options<GetTagDistributionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagDistributionResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/tags/distribution',
        ...options
    });
};

export const getDailyTagCounts = <ThrowOnError extends boolean = false>(options?: Options<GetDailyTagCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyTagCountsResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/tags/daily-counts',
        ...options
    });
};

export const getPostAnalytics = <ThrowOnError extends boolean = false>(options?: Options<GetPostAnalyticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostAnalyticsResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/posts',
        ...options
    });
};

export const getDailyPostCount = <ThrowOnError extends boolean = false>(options: Options<GetDailyPostCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailyPostCountResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/posts/daily-post-count',
        ...options
    });
};

export const getUsersPerDay = <ThrowOnError extends boolean = false>(options?: Options<GetUsersPerDayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersPerDayResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/dashboard/users/daily',
        ...options
    });
};

export const getPostsPerDay = <ThrowOnError extends boolean = false>(options?: Options<GetPostsPerDayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPostsPerDayResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/dashboard/posts/daily',
        ...options
    });
};

export const getDashboardOverview = <ThrowOnError extends boolean = false>(options?: Options<GetDashboardOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDashboardOverviewResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/dashboard/overview',
        ...options
    });
};

export const getCommentsPerDay = <ThrowOnError extends boolean = false>(options?: Options<GetCommentsPerDayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommentsPerDayResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/dashboard/comments/daily',
        ...options
    });
};

export const getAllDashboardData = <ThrowOnError extends boolean = false>(options?: Options<GetAllDashboardDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllDashboardDataResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/dashboard/all',
        ...options
    });
};

export const getCommentAnalyticsOverview = <ThrowOnError extends boolean = false>(options?: Options<GetCommentAnalyticsOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommentAnalyticsOverviewResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/comments/overview',
        ...options
    });
};

export const getDailyCommentCounts = <ThrowOnError extends boolean = false>(options?: Options<GetDailyCommentCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyCommentCountsResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/comments/daily-counts',
        ...options
    });
};

export const getCategoryAnalyticsOverview = <ThrowOnError extends boolean = false>(options?: Options<GetCategoryAnalyticsOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoryAnalyticsOverviewResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/categories/overview',
        ...options
    });
};

export const getCategoryDistribution = <ThrowOnError extends boolean = false>(options: Options<GetCategoryDistributionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryDistributionResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/categories/distribution',
        ...options
    });
};

export const getDailyCategoryCounts = <ThrowOnError extends boolean = false>(options?: Options<GetDailyCategoryCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyCategoryCountsResponse, unknown, ThrowOnError>({
        url: '/api/admin/analytics/categories/daily-counts',
        ...options
    });
};

export const getAll = <ThrowOnError extends boolean = false>(options?: Options<GetAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllResponse, unknown, ThrowOnError>({
        url: '/admin/api/follows',
        ...options
    });
};

export const bulkDeleteRoles = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteRolesResponse, unknown, ThrowOnError>({
        url: '/api/users/roles/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bulkDeletePermissions = <ThrowOnError extends boolean = false>(options: Options<BulkDeletePermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeletePermissionsResponse, unknown, ThrowOnError>({
        url: '/api/users/permissions/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAsset = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssetResponse, unknown, ThrowOnError>({
        url: '/api/storage/delete/{id}',
        ...options
    });
};

export const bulkDeleteReports = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteReportsResponse, unknown, ThrowOnError>({
        url: '/api/reports/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteInteraction = <ThrowOnError extends boolean = false>(options: Options<DeleteInteractionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteInteractionResponse, unknown, ThrowOnError>({
        url: '/api/posts/{postId}/interactions/{interactionType}',
        ...options
    });
};

export const removeTagFromPost = <ThrowOnError extends boolean = false>(options: Options<RemoveTagFromPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTagFromPostResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/post/{postId}/tag/{tagId}',
        ...options
    });
};

export const bulkDeleteTags = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteTagsResponse, unknown, ThrowOnError>({
        url: '/api/posts/tags/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePostCategories = <ThrowOnError extends boolean = false>(options: Options<DeletePostCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePostCategoriesResponse, unknown, ThrowOnError>({
        url: '/api/post-categories/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const softDeleteNotificationById = <ThrowOnError extends boolean = false>(options: Options<SoftDeleteNotificationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SoftDeleteNotificationByIdResponse, unknown, ThrowOnError>({
        url: '/api/notifications/{notificationId}/soft',
        ...options
    });
};

export const dismissAllNotifications = <ThrowOnError extends boolean = false>(options?: Options<DismissAllNotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DismissAllNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/notifications/dismiss-all',
        ...options
    });
};

export const removeInteraction = <ThrowOnError extends boolean = false>(options: Options<RemoveInteractionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveInteractionResponse, unknown, ThrowOnError>({
        url: '/api/comments/{commentId}/interactions/{interactionType}',
        ...options
    });
};

export const bulkDeleteUsers = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteUsersResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteAllUsers = <ThrowOnError extends boolean = false>(options?: Options<DeleteAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAllUsersResponse, unknown, ThrowOnError>({
        url: '/api/admin/users/all',
        ...options
    });
};

export const deleteAllPostsByUser = <ThrowOnError extends boolean = false>(options: Options<DeleteAllPostsByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAllPostsByUserResponse, unknown, ThrowOnError>({
        url: '/api/admin/posts/user/{userId}',
        ...options
    });
};

export const bulkDeleteNotifications = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteNotificationsResponse, unknown, ThrowOnError>({
        url: '/api/admin/notifications/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const forceDeleteNotificationById = <ThrowOnError extends boolean = false>(options: Options<ForceDeleteNotificationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ForceDeleteNotificationByIdResponse, unknown, ThrowOnError>({
        url: '/api/admin/notification-client/{notificationId}/force',
        ...options
    });
};

export const bulkDeleteLogEntries = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteLogEntriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteLogEntriesResponse, unknown, ThrowOnError>({
        url: '/api/admin/logs/bulk-delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMultipleComments = <ThrowOnError extends boolean = false>(options: Options<DeleteMultipleCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMultipleCommentsResponse, unknown, ThrowOnError>({
        url: '/api/admin/comments/bulk',
        ...options
    });
};

export const deleteAllComments = <ThrowOnError extends boolean = false>(options?: Options<DeleteAllCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAllCommentsResponse, unknown, ThrowOnError>({
        url: '/api/admin/comments/all',
        ...options
    });
};