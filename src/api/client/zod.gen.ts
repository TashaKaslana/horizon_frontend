// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zApiErrorResponse = z.object({
    status: z.number().int().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    timestamp: z.string().datetime().optional(),
    error: z.string().optional(),
    fieldErrors: z.object({}).optional(),
    globalErrors: z.array(z.string()).optional()
});

export const zPaginationInfo = z.object({
    currentPage: z.number().int().optional(),
    pageSize: z.number().int().optional(),
    totalItems: z.number().int().optional(),
    totalPages: z.number().int().optional(),
    hasNext: z.boolean().optional(),
    hasPrevious: z.boolean().optional()
});

export const zResponseMetadata = z.object({
    pagination: zPaginationInfo.optional(),
    links: z.object({}).optional()
});

export const zRestApiResponseVoid = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.unknown().optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdateRoleRequest = z.object({
    name: z.string().min(0).max(255).optional(),
    description: z.string().optional()
});

export const zPermissionDto = z.object({
    createdAt: z.string().datetime().optional(),
    id: z.string().uuid().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    description: z.string().optional(),
    module: z.string().optional()
});

export const zRoleDto = z.object({
    id: z.string().uuid().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    description: z.string().optional(),
    permissions: z.array(zPermissionDto).optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseRoleDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zRoleDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdatePermissionRequest = z.object({
    name: z.string().min(0).max(255).optional(),
    description: z.string().optional(),
    module: z.string().min(0).max(255).optional()
});

export const zRestApiResponsePermissionDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPermissionDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUserImageUpdate = z.object({
    profileImage: z.string().optional(),
    coverImage: z.string().optional()
});

export const zUserRespondDto = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    id: z.string().uuid().optional(),
    auth0Id: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    username: z.string().optional(),
    email: z.string().optional(),
    phoneNumber: z.string().optional(),
    dateOfBirth: z.string().date().optional(),
    gender: z.string().optional(),
    bio: z.string().optional(),
    profileImage: z.string().optional(),
    coverImage: z.string().optional(),
    country: z.string().optional(),
    city: z.string().optional(),
    deletedAt: z.string().datetime().optional(),
    displayName: z.string().optional(),
    status: z.enum([
        'ACTIVE',
        'PENDING',
        'SUSPENDED',
        'DEACTIVATED'
    ]).optional(),
    role: zRoleDto.optional(),
    lastLogin: z.string().datetime().optional(),
    isLogin: z.boolean().optional()
});

export const zRestApiResponseUserRespondDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zUserRespondDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUserUpdateInfoDto = z.object({
    firstName: z.string().min(1),
    lastName: z.string().min(1),
    displayName: z.string().min(1),
    phoneNumber: z.string().min(0).max(15).optional(),
    dateOfBirth: z.string().date().optional(),
    gender: z.string().min(0).max(10).optional(),
    country: z.string().min(0).max(100).optional(),
    city: z.string().min(0).max(100).optional(),
    bio: z.string().min(0).max(500).optional(),
    status: z.enum([
        'ACTIVE',
        'PENDING',
        'SUSPENDED',
        'DEACTIVATED'
    ]).optional()
});

export const zUserAccountUpdate = z.object({
    email: z.string().min(1),
    username: z.string().min(1),
    profileImage: z.string().optional(),
    coverImage: z.string().optional()
});

export const zUserLoginStatusDto = z.object({
    isLogin: z.boolean().optional(),
    lastLogin: z.string().datetime().optional()
});

export const zCommentDto = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    content: z.string().optional()
});

export const zPostSummaryResponse = z.object({
    id: z.string().uuid().optional(),
    createdBy: z.string().uuid().optional(),
    userId: z.string().uuid().optional(),
    caption: z.string().optional(),
    description: z.string().optional(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional(),
    videoThumbnailUrl: z.string().optional()
});

export const zUserSummaryRespond = z.object({
    id: z.string().uuid().optional(),
    displayName: z.string().optional(),
    username: z.string().optional(),
    profileImage: z.string().optional(),
    coverImage: z.string().optional(),
    createdAt: z.string().datetime().optional()
});

export const zReportDto = z.object({
    id: z.string().uuid().optional(),
    reason: z.string().optional(),
    moderatorNotes: z.string().optional(),
    status: z.enum([
        'PENDING',
        'REVIEWED_APPROVED',
        'REVIEWED_REJECTED',
        'ACTIONTAKEN_CONTENTREMOVED',
        'ACTIONTAKEN_USERWARNED',
        'ACTIONTAKEN_USERBANNED',
        'RESOLVED'
    ]).optional(),
    itemType: z.enum([
        'POST',
        'COMMENT',
        'USER'
    ]).optional(),
    post: zPostSummaryResponse.optional(),
    comment: zCommentDto.optional(),
    reportedUser: zUserSummaryRespond.optional(),
    reporter: zUserSummaryRespond.optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    resolvedAt: z.string().datetime().optional()
});

export const zRestApiResponseReportDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zReportDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkReportUpdateRequest = z.object({
    reportIds: z.array(z.string().uuid()).optional(),
    status: z.enum([
        'PENDING',
        'REVIEWED_APPROVED',
        'REVIEWED_REJECTED',
        'ACTIONTAKEN_CONTENTREMOVED',
        'ACTIONTAKEN_USERWARNED',
        'ACTIONTAKEN_USERBANNED',
        'RESOLVED'
    ]).optional(),
    moderatorNotes: z.string().optional()
});

export const zRestApiResponseListReportDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zReportDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdatePostRequest = z.object({
    caption: z.string().min(0).max(255),
    description: z.string().min(1),
    visibility: z.string().min(0).max(10),
    tags: z.array(z.string()).optional(),
    categoryName: z.string(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional()
});

export const zAssetRespond = z.object({
    createdAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    publicId: z.string().optional(),
    resourceType: z.string().optional(),
    format: z.string().optional(),
    bytes: z.coerce.bigint().optional(),
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    originalFilename: z.string().optional()
});

export const zPostResponse = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    user: zUserSummaryRespond.optional(),
    caption: z.string().optional(),
    description: z.string().optional(),
    duration: z.number().optional(),
    visibility: z.string().optional(),
    tags: z.array(z.string()).optional(),
    videoPlaybackUrl: z.string().optional(),
    videoThumbnailUrl: z.string().optional(),
    videoAsset: zAssetRespond.optional(),
    isAuthorDeleted: z.boolean().optional(),
    categoryName: z.string().optional(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional()
});

export const zRestApiResponsePostResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostResponse.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdateTagRequest = z.object({
    name: z.string().min(0).max(255),
    description: z.string().optional()
});

export const zTagResponse = z.object({
    id: z.string().uuid().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    description: z.string().optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional()
});

export const zRestApiResponseTagResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zTagResponse.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkPostUpdateRequest = z.object({
    ids: z.array(z.string().uuid()).min(1),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional(),
    visibility: z.enum([
        'PUBLIC',
        'FRIENDS',
        'PRIVATE'
    ]).optional(),
    categoryId: z.string().uuid().optional()
});

export const zRestApiResponseListPostResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPostResponse).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdateCommentContentDto = z.object({
    content: z.string().min(1),
    status: z.enum([
        'APPROVED',
        'PENDING',
        'SPAM',
        'REJECTED'
    ]).optional()
});

export const zCommentRespond = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    content: z.string().optional(),
    parentCommentId: z.string().uuid().optional(),
    isAuthorDeleted: z.boolean().optional(),
    user: zUserSummaryRespond.optional(),
    postId: z.string().uuid().optional(),
    isPinned: z.boolean().optional(),
    status: z.enum([
        'APPROVED',
        'PENDING',
        'SPAM',
        'REJECTED'
    ]).optional()
});

export const zRestApiResponseCommentRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zCommentRespond.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkCommentUpdateRequest = z.object({
    ids: z.array(z.string().uuid()).optional(),
    status: z.enum([
        'APPROVED',
        'PENDING',
        'SPAM',
        'REJECTED'
    ]).optional()
});

export const zRestApiResponseListCommentRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zCommentRespond).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkUserUpdateRequest = z.object({
    ids: z.array(z.string().uuid()).optional(),
    status: z.enum([
        'ACTIVE',
        'PENDING',
        'SUSPENDED',
        'DEACTIVATED'
    ]).optional(),
    roleId: z.string().uuid().optional()
});

export const zRestApiResponseListUserRespondDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zUserRespondDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkAdminNotificationUpdateRequest = z.object({
    notificationIds: z.array(z.string().uuid()).optional(),
    isRead: z.boolean().optional()
});

export const zAdminNotificationDto = z.object({
    id: z.string().uuid().optional(),
    title: z.string().optional(),
    message: z.string().optional(),
    type: z.enum([
        'REPORT',
        'SYSTEM',
        'AUTH',
        'MODERATION',
        'ERROR',
        'QUOTA'
    ]).optional(),
    severity: z.enum([
        'INFO',
        'WARNING',
        'ERROR',
        'CRITICAL'
    ]).optional(),
    source: z.string().optional(),
    relatedType: z.enum([
        'USER',
        'POST',
        'COMMENT',
        'STORAGE',
        'AUTH',
        'SYSTEM'
    ]).optional(),
    relatedId: z.string().uuid().optional(),
    isRead: z.boolean().optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListAdminNotificationDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zAdminNotificationDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdateNotificationDto = z.object({
    content: z.string().optional(),
    type: z.enum([
        'LIKE_POST',
        'NEW_FOLLOWER',
        'UN_FOLLOWER',
        'COMMENT_POST',
        'LIKE_COMMENT',
        'MENTION_COMMENT',
        'REPLY_COMMENT',
        'REPORT_COMMENT',
        'REPORT_POST',
        'COMMENT_PINNED',
        'SYSTEM_MESSAGE'
    ]).optional(),
    extraData: z.object({}).optional(),
    isRead: z.boolean().optional(),
    isDeleted: z.boolean().optional()
});

export const zUserCreateDto = z.object({
    auth0Id: z.string().min(1).regex(/^[a-zA-Z0-9-]+\|[^|]+$/),
    username: z.string().min(3).max(100),
    email: z.string().min(1),
    status: z.enum([
        'ACTIVE',
        'PENDING',
        'SUSPENDED',
        'DEACTIVATED'
    ]).optional()
});

export const zCreateRoleRequest = z.object({
    name: z.string().min(0).max(255),
    slug: z.string().min(0).max(255),
    description: z.string().optional(),
    permissionIds: z.array(z.string().uuid()).optional()
});

export const zAssignPermissionsToRoleRequest = z.object({
    roleId: z.string().uuid(),
    permissionIds: z.array(z.string().uuid())
});

export const zCreatePermissionRequest = z.object({
    name: z.string().min(0).max(255),
    slug: z.string().min(0).max(255),
    description: z.string().optional(),
    module: z.string().min(0).max(255)
});

export const zRestApiResponseMapStringObject = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.object({}).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUploadCompleteRequest = z.object({
    publicId: z.string().min(1),
    secureUrl: z.string().optional(),
    resourceType: z.string().min(1),
    format: z.string().min(1),
    bytes: z.coerce.bigint(),
    width: z.number().int(),
    height: z.number().int(),
    originalFilename: z.string().min(1)
});

export const zRestApiResponseAssetRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zAssetRespond.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCreateReportRequest = z.object({
    reason: z.string().min(1),
    itemType: z.enum([
        'POST',
        'COMMENT',
        'USER'
    ]),
    postId: z.string().uuid().optional(),
    commentId: z.string().uuid().optional(),
    reportedUserId: z.string().uuid().optional()
});

export const zCreatePostRequest = z.object({
    caption: z.string(),
    description: z.string().optional(),
    videoAsset: zUploadCompleteRequest.optional(),
    duration: z.number().optional(),
    visibility: z.enum([
        'PUBLIC',
        'FRIENDS',
        'PRIVATE'
    ]),
    tags: z.array(z.string()).optional(),
    categoryName: z.string(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional()
});

export const zPostCreatedDto = z.object({
    id: z.string().uuid().optional(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional()
});

export const zRestApiResponsePostCreatedDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostCreatedDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCreatePostInteraction = z.object({
    interactionType: z.enum([
        'LIKE',
        'DISLIKE'
    ])
});

export const zCreateTagRequest = z.object({
    name: z.string().min(0).max(255),
    description: z.string().min(0).max(255)
});

export const zCreatePostCategoryRequest = z.object({
    name: z.string()
});

export const zPostCategory = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    name: z.string().min(0).max(255),
    slug: z.string().min(0).max(255),
    description: z.string().min(0).max(500).optional()
});

export const zRestApiResponsePostCategory = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostCategory.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCreateCommentDto = z.object({
    postId: z.string().uuid(),
    content: z.string().min(1),
    parentCommentId: z.string().uuid().optional(),
    status: z.enum([
        'APPROVED',
        'PENDING',
        'SPAM',
        'REJECTED'
    ]).optional()
});

export const zCreateCommentInteraction = z.object({
    interactionType: z.enum([
        'LIKE',
        'DISLIKE'
    ])
});

export const zCommentInteractionRespond = z.object({
    id: z.string().uuid().optional(),
    user: zUserSummaryRespond.optional(),
    interactionType: z.string().optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseCommentInteractionRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zCommentInteractionRespond.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zMaintenanceRequestDto = z.object({
    message: z.string().optional(),
    completionDateTime: z.string().optional()
});

export const zMaintenanceInfoDto = z.object({
    active: z.boolean().optional(),
    message: z.string().optional(),
    activatedAt: z.string().optional(),
    completionDateTime: z.string().optional()
});

export const zRestApiResponseMaintenanceInfoDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zMaintenanceInfoDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCreateAdminNotification = z.object({
    title: z.string().optional(),
    message: z.string().optional(),
    type: z.enum([
        'REPORT',
        'SYSTEM',
        'AUTH',
        'MODERATION',
        'ERROR',
        'QUOTA'
    ]).optional(),
    severity: z.enum([
        'INFO',
        'WARNING',
        'ERROR',
        'CRITICAL'
    ]).optional(),
    source: z.string().optional(),
    relatedType: z.enum([
        'USER',
        'POST',
        'COMMENT',
        'STORAGE',
        'AUTH',
        'SYSTEM'
    ]).optional(),
    relatedId: z.string().uuid().optional()
});

export const zRestApiResponseAdminNotificationDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zAdminNotificationDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCreateNotificationRequest = z.object({
    recipientUserId: z.string().uuid(),
    postId: z.string().uuid().optional(),
    commentId: z.string().uuid().optional(),
    content: z.string().min(1),
    type: z.enum([
        'LIKE_POST',
        'NEW_FOLLOWER',
        'UN_FOLLOWER',
        'COMMENT_POST',
        'LIKE_COMMENT',
        'MENTION_COMMENT',
        'REPLY_COMMENT',
        'REPORT_COMMENT',
        'REPORT_POST',
        'COMMENT_PINNED',
        'SYSTEM_MESSAGE'
    ]),
    extraData: z.object({}).optional()
});

export const zCreateLogEntryRequest = z.object({
    severity: z.enum([
        'INFO',
        'WARNING',
        'ERROR',
        'CRITICAL'
    ]),
    message: z.string().min(1),
    source: z.string().min(1),
    userId: z.string().uuid().optional(),
    context: z.object({}).optional()
});

export const zLogEntryDto = z.object({
    id: z.string().uuid().optional(),
    timestamp: z.string().datetime().optional(),
    severity: z.enum([
        'INFO',
        'WARNING',
        'ERROR',
        'CRITICAL'
    ]).optional(),
    message: z.string().optional(),
    source: z.string().optional(),
    userId: z.string().uuid().optional(),
    context: z.object({}).optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseLogEntryDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zLogEntryDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUpdatePostCategoryRequest = z.object({
    name: z.string().min(0).max(255)
});

export const zPostCategorySummary = z.object({
    createdAt: z.string().datetime().optional(),
    id: z.string().uuid().optional(),
    name: z.string().min(0).max(255)
});

export const zRestApiResponsePostCategorySummary = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostCategorySummary.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseBoolean = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.boolean().optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseUserSummaryRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zUserSummaryRespond.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zUserIntroduction = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    id: z.string().uuid().optional(),
    displayName: z.string().optional(),
    username: z.string().optional(),
    email: z.string().optional(),
    bio: z.string().optional(),
    profileImage: z.string().optional(),
    coverImage: z.string().optional(),
    role: zRoleDto.optional(),
    status: z.enum([
        'ACTIVE',
        'PENDING',
        'SUSPENDED',
        'DEACTIVATED'
    ]).optional(),
    lastLogin: z.string().datetime().optional(),
    isLogin: z.boolean().optional()
});

export const zRestApiResponseUserIntroduction = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zUserIntroduction.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListRoleDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zRoleDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListPermissionDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPermissionDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseUserLoginStatusDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zUserLoginStatusDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseString = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.string().optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zPostViewRespond = z.object({
    totalView: z.coerce.bigint().optional()
});

export const zRestApiResponsePostViewRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostViewRespond.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zPostInteractionResponse = z.object({
    id: z.string().uuid().optional(),
    user: zUserSummaryRespond.optional(),
    interaction: z.enum([
        'LIKE',
        'DISLIKE'
    ]).optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListPostInteractionResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPostInteractionResponse).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zTotalPostResponse = z.object({
    totalPosts: z.coerce.bigint().optional()
});

export const zRestApiResponseTotalPostResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zTotalPostResponse.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListTagResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zTagResponse).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zTagWithCountDto = z.object({
    id: z.string().uuid().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
    description: z.string().optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    postCount: z.coerce.bigint().optional()
});

export const zRestApiResponseListTagWithCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zTagWithCountDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseTagWithCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zTagWithCountDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListString = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(z.string()).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListPostCategory = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPostCategory).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zPostCategoryWithCountDto = z.object({
    id: z.string().uuid().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    slug: z.string().optional(),
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    postCount: z.coerce.bigint().optional()
});

export const zRestApiResponseListPostCategoryWithCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPostCategoryWithCountDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponsePostCategoryWithCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostCategoryWithCountDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zNotificationResponse = z.object({
    id: z.string().uuid().optional(),
    recipientUser: zUserSummaryRespond.optional(),
    senderUser: zUserSummaryRespond.optional(),
    post: zPostSummaryResponse.optional(),
    comment: zCommentDto.optional(),
    content: z.string().optional(),
    type: z.enum([
        'LIKE_POST',
        'NEW_FOLLOWER',
        'UN_FOLLOWER',
        'COMMENT_POST',
        'LIKE_COMMENT',
        'MENTION_COMMENT',
        'REPLY_COMMENT',
        'REPORT_COMMENT',
        'REPORT_POST',
        'COMMENT_PINNED',
        'SYSTEM_MESSAGE'
    ]).optional(),
    extraData: z.object({}).optional(),
    isRead: z.boolean().optional(),
    isDeleted: z.boolean().optional(),
    createdAt: z.string().datetime().optional(),
    deletedAt: z.string().datetime().optional()
});

export const zRestApiResponseNotificationResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zNotificationResponse.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zNotificationCount = z.object({
    count: z.number().int().optional(),
    unreadCount: z.number().int().optional()
});

export const zNotificationStatistic = z.object({
    allCount: z.number().int().optional(),
    allUnreadCount: z.number().int().optional(),
    stats: z.object({}).optional()
});

export const zRestApiResponseNotificationStatistic = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zNotificationStatistic.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListNotificationResponse = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zNotificationResponse).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zActivityType = z.object({
    id: z.number().int().optional(),
    code: z.string().optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    category: z.string().optional()
});

export const zHistoryActivityDto = z.object({
    id: z.string().uuid().optional(),
    activityType: zActivityType.optional(),
    activityDescription: z.string().optional(),
    activityDetail: z.object({}).optional(),
    targetId: z.string().uuid().optional(),
    targetType: z.string().optional(),
    user: zUserSummaryRespond.optional(),
    userAgent: z.string().optional(),
    ipAddress: z.string().optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListHistoryActivityDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zHistoryActivityDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zActivityPart = z.object({
    type: z.string().optional(),
    value: z.string().optional(),
    entity: z.string().optional(),
    id: z.string().optional(),
    label: z.string().optional()
});

export const zActivityDisplayDto = z.object({
    id: z.string().uuid().optional(),
    parts: z.array(zActivityPart).optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListActivityDisplayDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zActivityDisplayDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zFollowOverview = z.object({
    isMeFollowing: z.boolean().optional(),
    totalFollowers: z.number().int().optional(),
    totalFollowing: z.number().int().optional()
});

export const zRestApiResponseFollowOverview = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zFollowOverview.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zFollowOneSideRespond = z.object({
    user: zUserIntroduction.optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListFollowOneSideRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zFollowOneSideRespond).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zPostStatistic = z.object({
    totalLikes: z.coerce.bigint().optional(),
    totalComments: z.coerce.bigint().optional(),
    totalBookmarks: z.coerce.bigint().optional(),
    totalViews: z.coerce.bigint().optional(),
    isLiked: z.boolean().optional(),
    isBookmarked: z.boolean().optional()
});

export const zFeedPage = z.object({
    post: zPostResponse.optional(),
    statistic: zPostStatistic.optional()
});

export const zRestApiResponseListFeedPage = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zFeedPage).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseFeedPage = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zFeedPage.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListCommentInteractionRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zCommentInteractionRespond).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zOverviewStatistic = z.object({
    title: z.string().optional(),
    value: z.string().optional(),
    trend: z.number().optional(),
    message: z.string().optional(),
    description: z.string().optional()
});

export const zRestApiResponseListOverviewStatistic = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zOverviewStatistic).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zDailyPendingAndResolvedDto = z.object({
    date: z.string().date().optional(),
    pendingCount: z.coerce.bigint().optional(),
    resolvedCount: z.coerce.bigint().optional()
});

export const zRestApiResponseListDailyPendingAndResolvedDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zDailyPendingAndResolvedDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zDailyCountDto = z.object({
    date: z.string().date().optional(),
    count: z.coerce.bigint().optional()
});

export const zRestApiResponseListDailyCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zDailyCountDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseMapStringListDailyCountDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.object({}).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseMapStringLong = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.object({}).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListUserSummaryRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zUserSummaryRespond).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListUserIntroduction = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zUserIntroduction).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zDatabaseRelationshipDto = z.object({
    referencedTable: z.string().optional(),
    referencedColumn: z.string().optional()
});

export const zDatabaseColumnDto = z.object({
    name: z.string().optional(),
    type: z.string().optional(),
    size: z.number().int().optional(),
    nullable: z.boolean().optional(),
    isPrimaryKey: z.boolean().optional(),
    isForeignKey: z.boolean().optional(),
    relationship: zDatabaseRelationshipDto.optional()
});

export const zDatabaseSchemaDto = z.object({
    tables: z.object({}).optional()
});

export const zRestApiResponseDatabaseSchemaDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zDatabaseSchemaDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zPostAdminViewDto = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    user: zUserSummaryRespond.optional(),
    caption: z.string().optional(),
    description: z.string().optional(),
    duration: z.number().optional(),
    visibility: z.enum([
        'PUBLIC',
        'FRIENDS',
        'PRIVATE'
    ]).optional(),
    tags: z.array(z.string()).optional(),
    videoPlaybackUrl: z.string().optional(),
    videoThumbnailUrl: z.string().optional(),
    videoAsset: zAssetRespond.optional(),
    isAuthorDeleted: z.boolean().optional(),
    status: z.enum([
        'DRAFT',
        'PENDING_REVIEW',
        'PUBLISHED',
        'REJECTED',
        'ARCHIVED'
    ]).optional(),
    totalViews: z.coerce.bigint().optional(),
    totalInteractions: z.coerce.bigint().optional(),
    category: zPostCategorySummary.optional()
});

export const zRestApiResponsePostAdminViewDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: zPostAdminViewDto.optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListPostAdminViewDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zPostAdminViewDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zRestApiResponseListLogEntryDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zLogEntryDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zCommentResponseWithPostDetails = z.object({
    createdAt: z.string().datetime().optional(),
    updatedAt: z.string().datetime().optional(),
    createdBy: z.string().uuid().optional(),
    updatedBy: z.string().uuid().optional(),
    id: z.string().uuid().optional(),
    post: zPostSummaryResponse.optional(),
    user: zUserSummaryRespond.optional(),
    content: z.string().optional(),
    parentCommentId: z.string().uuid().optional(),
    parentCommentUser: zUserSummaryRespond.optional(),
    parentCommentContent: z.string().optional(),
    isPinned: z.boolean().optional(),
    isAuthorDeleted: z.boolean().optional(),
    status: z.enum([
        'APPROVED',
        'PENDING',
        'SPAM',
        'REJECTED'
    ]).optional()
});

export const zRestApiResponseListCommentResponseWithPostDetails = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zCommentResponseWithPostDetails).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zTopTagUsageDto = z.object({
    id: z.string().uuid().optional(),
    tagName: z.string().optional(),
    postDate: z.string().date().optional(),
    postCount: z.coerce.bigint().optional(),
    rank: z.number().int().optional()
});

export const zRestApiResponseListTopTagUsageDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zTopTagUsageDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zTopCategoryUsageDto = z.object({
    id: z.string().uuid().optional(),
    categoryName: z.string().optional(),
    postDate: z.string().date().optional(),
    postCount: z.coerce.bigint().optional(),
    rank: z.number().int().optional()
});

export const zRestApiResponseListTopCategoryUsageDto = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zTopCategoryUsageDto).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zFollowRespond = z.object({
    follower: zUserSummaryRespond.optional(),
    following: zUserSummaryRespond.optional(),
    createdAt: z.string().datetime().optional()
});

export const zRestApiResponseListFollowRespond = z.object({
    success: z.boolean().optional(),
    message: z.string().optional(),
    data: z.array(zFollowRespond).optional(),
    error: zApiErrorResponse.optional(),
    timestamp: z.string().datetime().optional(),
    metadata: zResponseMetadata.optional()
});

export const zBulkRoleDeleteRequest = z.object({
    roleIds: z.array(z.string().uuid()).optional()
});

export const zBulkPermissionDeleteRequest = z.object({
    permissionIds: z.array(z.string().uuid()).optional()
});

export const zBulkReportDeleteRequest = z.object({
    reportIds: z.array(z.string().uuid()).optional()
});

export const zBulkTagDeleteRequest = z.object({
    tagIds: z.array(z.string().uuid()).optional()
});

export const zBulkPostCategoryDeleteRequest = z.object({
    postCategoryIds: z.array(z.string().uuid()).min(1)
});

export const zBulkUserDeleteRequest = z.object({
    userIds: z.array(z.string().uuid()).min(1)
});

export const zBulkPostDeleteRequest = z.object({
    postIds: z.array(z.string().uuid()).min(1)
});

export const zBulkAdminNotificationDeleteRequest = z.object({
    notificationIds: z.array(z.string().uuid()).optional()
});

export const zBulkLogDeleteRequest = z.object({
    logIds: z.array(z.string().uuid()).optional()
});

export const zRestoreUserResponse = zRestApiResponseVoid;

export const zDeleteRoleResponse = zRestApiResponseVoid;

export const zGetRoleByIdResponse = zRestApiResponseRoleDto;

export const zUpdateRoleResponse = zRestApiResponseRoleDto;

export const zDeletePermissionResponse = zRestApiResponseVoid;

export const zGetPermissionByIdResponse = zRestApiResponsePermissionDto;

export const zUpdatePermissionResponse = zRestApiResponsePermissionDto;

export const zUpdateUserImageResponse = zRestApiResponseUserRespondDto;

export const zUpdateCurrentUserInfoResponse = zRestApiResponseUserRespondDto;

export const zUpdateUserAccountResponse = zRestApiResponseUserRespondDto;

export const zGetUserLoginStatusResponse = zRestApiResponseUserLoginStatusDto;

export const zUpdateUserLoginStatusResponse = zRestApiResponseUserRespondDto;

export const zGetLoginStatusResponse = zRestApiResponseUserLoginStatusDto;

export const zUpdateLoginStatusResponse = zRestApiResponseUserRespondDto;

export const zUpdateReportStatusResponse = zRestApiResponseReportDto;

export const zBulkUpdateReportsResponse = zRestApiResponseListReportDto;

export const zDeletePostResponse = zRestApiResponseVoid;

export const zGetPostByIdResponse = zRestApiResponsePostResponse;

export const zUpdatePostResponse = zRestApiResponsePostResponse;

export const zDeleteTagResponse = zRestApiResponseVoid;

export const zGetTagByIdResponse = zRestApiResponseTagResponse;

export const zUpdateTagResponse = zRestApiResponseTagResponse;

export const zRemoveAllTagsFromPostResponse = zRestApiResponseVoid;

export const zUpdatePostTagsResponse = zRestApiResponseVoid;

export const zBulkUpdatePostsResponse = zRestApiResponseListPostResponse;

export const zDeleteCommentResponse = zRestApiResponseVoid;

export const zGetCommentByIdResponse = zRestApiResponseCommentRespond;

export const zUpdateCommentResponse = zRestApiResponseCommentRespond;

export const zBulkUpdateCommentsResponse = zRestApiResponseListCommentRespond;

export const zUpdateUserInfoResponse = zRestApiResponseUserRespondDto;

export const zUpdateUserAccount1Response = zRestApiResponseUserRespondDto;

export const zBulkUpdateUsersResponse = zRestApiResponseListUserRespondDto;

export const zBulkDeletePostsResponse = zRestApiResponseVoid;

export const zBulkUpdatePosts1Response = zRestApiResponseListPostResponse;

export const zBulkUpdateNotificationsResponse = zRestApiResponseListAdminNotificationDto;

export const zUpdateNotificationByIdResponse = zRestApiResponseVoid;

export const zCreateUserResponse = zRestApiResponseUserRespondDto;

export const zGetAllRolesResponse = zRestApiResponseListRoleDto;

export const zCreateRoleResponse = zRestApiResponseRoleDto;

export const zSyncPermissionsForRoleResponse = zRestApiResponseRoleDto;

export const zAssignPermissionsToRoleResponse = zRestApiResponseRoleDto;

export const zGetAllPermissionsResponse = zRestApiResponseListPermissionDto;

export const zCreatePermissionResponse = zRestApiResponsePermissionDto;

export const zGenerateUploadSignatureResponse = zRestApiResponseMapStringObject;

export const zCreateAssetResponse = zRestApiResponseAssetRespond;

export const zSearchReportsResponse = zRestApiResponseListReportDto;

export const zCreateReportResponse = zRestApiResponseReportDto;

export const zCreatePostResponse = zRestApiResponsePostCreatedDto;

export const zRecordViewResponse = zRestApiResponseVoid;

export const zGetInteractionsByPostIdResponse = zRestApiResponseListPostInteractionResponse;

export const zCreateInteractionResponse = zRestApiResponseVoid;

export const zDeleteBookmarkResponse = zRestApiResponseVoid;

export const zIsBookmarkedResponse = zRestApiResponseBoolean;

export const zBookmarkPostResponse = zRestApiResponseVoid;

export const zGetAllTagsResponse = zRestApiResponseListTagResponse;

export const zCreateTagResponse = zRestApiResponseTagResponse;

export const zAddTagsToPostResponse = zRestApiResponseVoid;

export const zGetPostCategoriesResponse = zRestApiResponseListPostCategory;

export const zCreatePostCategoryResponse = zRestApiResponsePostCategory;

export const zCleanupOldSoftDeletedNotificationsResponse = zRestApiResponseVoid;

export const zUnfollowResponse = zRestApiResponseVoid;

export const zFollowResponse = zRestApiResponseVoid;

export const zCreateCommentResponse = zRestApiResponseCommentRespond;

export const zGetInteractionsResponse = zRestApiResponseListCommentInteractionRespond;

export const zCreateInteraction1Response = zRestApiResponseCommentInteractionRespond;

export const zEnableMaintenanceResponse = zRestApiResponseMaintenanceInfoDto;

export const zDisableMaintenanceResponse = zRestApiResponseMaintenanceInfoDto;

export const zGetAllNotificationsResponse = zRestApiResponseListAdminNotificationDto;

export const zCreateNotificationResponse = zRestApiResponseAdminNotificationDto;

export const zCreateAdminNotificationsResponse = zRestApiResponseVoid;

export const zGetAllLogEntriesResponse = zRestApiResponseListLogEntryDto;

export const zCreateLogEntryResponse = zRestApiResponseLogEntryDto;

export const zDeletePostCategoryResponse = zRestApiResponseVoid;

export const zUpdatePostCategoryResponse = zRestApiResponsePostCategorySummary;

export const zUnmarkNotificationAsReadResponse = zRestApiResponseVoid;

export const zMarkNotificationAsReadResponse = zRestApiResponseVoid;

export const zUnmarkAllNotificationsAsReadResponse = zRestApiResponseVoid;

export const zMarkAllNotificationsAsReadResponse = zRestApiResponseVoid;

export const zUnpinCommentResponse = zRestApiResponseVoid;

export const zPinCommentResponse = zRestApiResponseVoid;

export const zMarkAsUnreadResponse = zRestApiResponseAdminNotificationDto;

export const zMarkAsReadResponse = zRestApiResponseAdminNotificationDto;

export const zIsUserExistsResponse = zRestApiResponseBoolean;

export const zGetUserSummaryResponse = zRestApiResponseUserSummaryRespond;

export const zGetUserIntroductionResponse = zRestApiResponseUserIntroduction;

export const zGetRoleBySlugResponse = zRestApiResponseRoleDto;

export const zGetPermissionBySlugResponse = zRestApiResponsePermissionDto;

export const zDeleteCurrentUserResponse = zRestApiResponseVoid;

export const zGetCurrentUserResponse = zRestApiResponseUserRespondDto;

export const zIsUserExistsByAuth0IdResponse = zRestApiResponseBoolean;

export const zGetVideoThumbnailUrlResponse = zRestApiResponseString;

export const zGetVideoPlaybackUrlResponse = zRestApiResponseString;

export const zGetAssetByIdResponse = zRestApiResponseAssetRespond;

export const zGetAssetByPublicIdResponse = zRestApiResponseAssetRespond;

export const zDeleteReportResponse = zRestApiResponseVoid;

export const zGetReportByIdResponse = zRestApiResponseReportDto;

export const zGetAllReportsResponse = zRestApiResponseListReportDto;

export const zGetTotalViewsResponse = zRestApiResponsePostViewRespond;

export const zHasMeInteractedResponse = zRestApiResponseBoolean;

export const zGetTotalViewsByUserIdResponse = zRestApiResponsePostViewRespond;

export const zGetCountAllPostsByUserIdResponse = zRestApiResponseTotalPostResponse;

export const zGetAllPublicPostsByUserIdResponse = zRestApiResponseListPostResponse;

export const zGetTagsWithCountsResponse = zRestApiResponseListTagWithCountDto;

export const zGetTagWithCountByIdResponse = zRestApiResponseTagWithCountDto;

export const zGetTagWithCountBySlugResponse = zRestApiResponseTagWithCountDto;

export const zGetTagWithCountByNameResponse = zRestApiResponseTagWithCountDto;

export const zGetTagNamesByPostIdResponse = zRestApiResponseListString;

export const zGetTagsByPostIdResponse = zRestApiResponseListTagResponse;

export const zGetAllTagsWithCountsResponse = zRestApiResponseListTagWithCountDto;

export const zGetAllPublicPostsResponse = zRestApiResponseListPostResponse;

export const zGetMeAllPostsResponse = zRestApiResponseListPostResponse;

export const zGetPostCategoryByNameResponse = zRestApiResponsePostCategorySummary;

export const zGetCategoriesWithCountsResponse = zRestApiResponseListPostCategoryWithCountDto;

export const zGetCategoryWithCountByNameResponse = zRestApiResponsePostCategoryWithCountDto;

export const zGetCategoryWithCountByIdResponse = zRestApiResponsePostCategoryWithCountDto;

export const zGetPostCategoryByIdResponse = zRestApiResponsePostCategorySummary;

export const zGetAllCategoriesWithCountsResponse = zRestApiResponseListPostCategoryWithCountDto;

export const zGetNotificationByIdResponse = zRestApiResponseNotificationResponse;

export const zGetNotificationStatisticsResponse = zRestApiResponseNotificationStatistic;

export const zGetMyNotificationsResponse = zRestApiResponseListNotificationResponse;

export const zGetHistoriesByUserIdResponse = zRestApiResponseListHistoryActivityDto;

export const zGetHistoriesForMeResponse = zRestApiResponseListActivityDisplayDto;

export const zGetOverviewResponse = zRestApiResponseFollowOverview;

export const zGetFollowingByUserIdResponse = zRestApiResponseListFollowOneSideRespond;

export const zGetFollowersByUserIdResponse = zRestApiResponseListFollowOneSideRespond;

export const zGetMyFollowingResponse = zRestApiResponseListFollowOneSideRespond;

export const zGetMyFollowersResponse = zRestApiResponseListFollowOneSideRespond;

export const zIsFriendResponse = zRestApiResponseBoolean;

export const zGetFeedResponse = zRestApiResponseListFeedPage;

export const zGetFeedByUserIdResponse = zRestApiResponseListFeedPage;

export const zGetFeed1Response = zRestApiResponseFeedPage;

export const zGetAllCommentsByPostIdResponse = zRestApiResponseListCommentRespond;

export const zGetModerationOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetUserModerationOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetPostModerationOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetCommentModerationOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetDailyPendingAndResolvedReportsResponse = zRestApiResponseListDailyPendingAndResolvedDto;

export const zGetLogOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetDailyErrorLogsResponse = zRestApiResponseListDailyCountDto;

export const zGetDailyLogsBySeverityResponse = zRestApiResponseMapStringListDailyCountDto;

export const zGetNotificationTrendsResponse = zRestApiResponseListDailyCountDto;

export const zGetAdminNotificationOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetNotificationsByTypeResponse = zRestApiResponseMapStringLong;

export const zGetNotificationsBySeverityResponse = zRestApiResponseMapStringLong;

export const zGetAllUsersResponse = zRestApiResponseListUserSummaryRespond;

export const zDeleteUserResponse = zRestApiResponseVoid;

export const zGetUserResponse = zRestApiResponseUserRespondDto;

export const zGetAllUserIntroductionsResponse = zRestApiResponseListUserIntroduction;

export const zGetSystemStatusResponse = zRestApiResponseMapStringObject;

export const zGetStatusMaintenanceResponse = zRestApiResponseMaintenanceInfoDto;

export const zGetDatabaseSchemaResponse = zRestApiResponseDatabaseSchemaDto;

export const zGetAllPostsForAdminResponse = zRestApiResponseListPostResponse;

export const zDeletePost1Response = zRestApiResponseVoid;

export const zGetPostByIdForAdminResponse = zRestApiResponsePostAdminViewDto;

export const zGetAllPostWithDetailsForAdminResponse = zRestApiResponseListPostAdminViewDto;

export const zDeleteNotificationResponse = zRestApiResponseVoid;

export const zGetNotificationById1Response = zRestApiResponseAdminNotificationDto;

export const zGetAllNotificationByRecipientIdResponse = zRestApiResponseListNotificationResponse;

export const zGetLogEntryByIdResponse = zRestApiResponseLogEntryDto;

export const zGetAllCommentsResponse = zRestApiResponseListCommentRespond;

export const zGetAllCommentsWithPostDetailsResponse = zRestApiResponseListCommentResponseWithPostDetails;

export const zGetUserAnalyticsOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetDailyUserCountsResponse = zRestApiResponseListDailyCountDto;

export const zGetTagAnalyticsOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetTagDistributionResponse = zRestApiResponseListTopTagUsageDto;

export const zGetDailyTagCountsResponse = zRestApiResponseListDailyCountDto;

export const zGetPostAnalyticsResponse = zRestApiResponseListOverviewStatistic;

export const zGetDailyPostCountResponse = zRestApiResponseListDailyCountDto;

export const zGetUsersPerDayResponse = zRestApiResponseListDailyCountDto;

export const zGetPostsPerDayResponse = zRestApiResponseListDailyCountDto;

export const zGetDashboardOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetCommentsPerDayResponse = zRestApiResponseListDailyCountDto;

export const zGetAllDashboardDataResponse = zRestApiResponseMapStringObject;

export const zGetCommentAnalyticsOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetDailyCommentCountsResponse = zRestApiResponseListDailyCountDto;

export const zGetCategoryAnalyticsOverviewResponse = zRestApiResponseListOverviewStatistic;

export const zGetCategoryDistributionResponse = zRestApiResponseListTopCategoryUsageDto;

export const zGetDailyCategoryCountsResponse = zRestApiResponseListDailyCountDto;

export const zGetAllResponse = zRestApiResponseListFollowRespond;

export const zBulkDeleteRolesResponse = zRestApiResponseVoid;

export const zBulkDeletePermissionsResponse = zRestApiResponseVoid;

export const zDeleteAssetResponse = zRestApiResponseVoid;

export const zBulkDeleteReportsResponse = zRestApiResponseVoid;

export const zDeleteInteractionResponse = zRestApiResponseVoid;

export const zRemoveTagFromPostResponse = zRestApiResponseVoid;

export const zBulkDeleteTagsResponse = zRestApiResponseVoid;

export const zDeletePostCategoriesResponse = zRestApiResponseVoid;

export const zSoftDeleteNotificationByIdResponse = zRestApiResponseVoid;

export const zDismissAllNotificationsResponse = zRestApiResponseVoid;

export const zRemoveInteractionResponse = zRestApiResponseVoid;

export const zBulkDeleteUsersResponse = zRestApiResponseVoid;

export const zDeleteAllUsersResponse = zRestApiResponseVoid;

export const zDeleteAllPostsByUserResponse = zRestApiResponseVoid;

export const zBulkDeleteNotificationsResponse = zRestApiResponseVoid;

export const zForceDeleteNotificationByIdResponse = zRestApiResponseVoid;

export const zBulkDeleteLogEntriesResponse = zRestApiResponseVoid;

export const zDeleteMultipleCommentsResponse = zRestApiResponseVoid;

export const zDeleteAllCommentsResponse = zRestApiResponseVoid;